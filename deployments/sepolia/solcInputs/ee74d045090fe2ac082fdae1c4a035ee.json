{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/DTrustFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./DTrustV1.sol\";\n\n/// @title DTRUSTFactory\n/// @notice Factory contract for creating new DTrust contracts\n/// @dev This contract deploys new instances of DTrust and tracks them\ncontract DTRUSTFactory {\n    /// Public variable with the address of the bank wallet\n    address public bankWallet;\n\n    /// Fee percentage for the bank; scaled by 100 (e.g., 10 represents 0.10%, 100 represents 1%, 1000 represents 10%)\n    uint256 public bankFee = 10;\n\n    /// Dynamic array of all deployed DTrust contracts\n    address[] public allDTrusts;\n\n    /// Mapping from user addresses to their respective DTrust contracts\n    mapping(address => address[]) public dTrustsByUser;\n\n    /// Mapping to check if a user has been added to a DTrust contract to prevent duplicates\n    mapping(address => mapping(address => bool)) public isUserAddedToDTrust;\n\n    /// Event emitted when a new DTrust contract is created\n    event DTrustCreated(address indexed settlor, address trustAddress);\n\n    /// Event emitted when a user is added to a DTrust contract\n    event UserAddedToDTrust(address indexed user, address trustAddress);\n\n    /// @notice Constructs the DTRUSTFactory and sets the bank wallet address\n    /// @param _bankWallet The address of the bank wallet where fees are collected\n    constructor(address _bankWallet) {\n        bankWallet = _bankWallet;\n    }\n\n    /// @notice Creates a new DTRUST contract and registers the involved parties\n    /// @param _name Name of the dtrust\n    /// @param _settlor Address of the settlor creating the dtrust\n    /// @param _trustees Array of addresses designated as trustees\n    /// @param _beneficiaries Array of addresses designated as beneficiaries\n    /// @param _canRevokeAddresses Array of addresses with permission to revoke the dtrust\n    function createDTRUST(\n        string calldata _name,\n        address _settlor,\n        address[] calldata _trustees,\n        address[] calldata _beneficiaries,\n        address[] calldata _canRevokeAddresses\n    ) external {\n        DTRUST newDTRUST = new DTRUST(\n            _name,\n            _settlor,\n            address(this),\n            _trustees,\n            _beneficiaries,\n            _canRevokeAddresses\n        );\n        allDTrusts.push(address(newDTRUST));\n        addUniqueUser(_settlor, newDTRUST);\n        addUniqueUsers(_trustees, newDTRUST);\n        addUniqueUsers(_beneficiaries, newDTRUST);\n        emit DTrustCreated(_settlor, address(newDTRUST));\n    }\n\n    /// @dev Adds an array of unique users to the internal tracking for a given DTRUST\n    /// @param _users Array of user addresses to be added\n    /// @param newDTRUST Address of the DTRUST contract to which users are added\n    function addUniqueUsers(address[] calldata _users, DTRUST newDTRUST) internal {\n        for (uint i = 0; i < _users.length; i++) {\n            addUniqueUser(_users[i], newDTRUST);\n        }\n    }\n\n    /// @dev Adds a single unique user to the internal tracking for a given DTRUST\n    /// @param _user Address of the user to be added\n    /// @param newDTRUST Address of the DTRUST contract to which the user is added\n    function addUniqueUser(address _user, DTRUST newDTRUST) internal {\n        if (!isUserAddedToDTrust[_user][address(newDTRUST)]) {\n            dTrustsByUser[_user].push(address(newDTRUST));\n            isUserAddedToDTrust[_user][address(newDTRUST)] = true;\n            emit UserAddedToDTrust(_user, address(newDTRUST));\n        }\n    }\n\n    /// @notice Retrieves the DTRUST contracts associated with a given user\n    /// @param _user The address of the user\n    /// @return An array of addresses of DTRUST contracts linked to the user\n    function getDTrustsByUser(address _user) external view returns (address[] memory) {\n        return dTrustsByUser[_user];\n    }\n\n    /// @notice Collects the annual fee for a specified DTRUST contract\n    /// @param dtrustAddress The payable address of the DTRUST contract from which to collect the fee\n    function collectAnnualFeeForTrust(address payable dtrustAddress) external {\n        DTRUST(dtrustAddress).takeAnnualFee(bankWallet, bankFee);\n    }\n\n    /// @notice Returns the total number of DTRUST contracts created by the factory\n    /// @return The count of all DTRUST contracts\n    function getAllDTrustsCount() external view returns (uint256) {\n        return allDTrusts.length;\n    }\n}\n"
    },
    "contracts/DTrustV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/// @title ERC-20 interface\ninterface IERC20 {\n    function transfer(address to, uint256 amount) external returns (bool);\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n\n/// @title DTRUST contract for managing dtrusts\n/// @notice This contract allows for the creation and management of dtrusts\n/// @dev Extends ReentrancyGuard from OpenZeppelin to prevent reentrancy attacks\ncontract DTRUST is ReentrancyGuard {\n    using SafeMath for uint256;\n\n    // State variables\n    address settlor;\n    address factoryAddress;\n    address[] trustees;\n    address[] beneficiaries;\n    address[] tokens;\n    string name;\n    bool public isRevoked = false;\n    \n    // Mappings\n    mapping(address => bool) trusteesLookup;\n    mapping(address => bool) beneficiariesLookup;\n    mapping(address => bool) public revokeAddressLookup;\n    mapping(address => bool) tokenLookup;\n\n    // Balances\n    uint256 etherBalance = 0;\n    uint256 public startFeeTime;\n    uint256 public dateCreated;\n\n    // Events\n    event Paid(address indexed token, address indexed beneficiary, uint256 amount);\n    event Revoked();\n    event RemoveRevokableAddress(address indexed revokableAddress);\n    event ReceivedEther(address indexed sender, uint256 amount);\n    event DepositedEther(address indexed sender, uint256 amount);\n    event DepositedToken(address indexed token, address indexed sender, uint256 amount);\n\n    // Modifiers\n    modifier isTrustee() {\n        require(trusteesLookup[msg.sender], \"Only a trustee can perform this action\");\n        _;\n    }\n\n    modifier isActive() {\n        require(!isRevoked, \"The contract has been revoked\");\n        _;\n    }\n\n    /// @notice Constructor to create a DTRUST\n    /// @param _name Name of the dtrust\n    /// @param _settlor Address of the settlor creating the dtrust\n    /// @param _factoryAddress Address of the factory contract creating this dtrust\n    /// @param _trustees Array of addresses of the trustees\n    /// @param _beneficiaries Array of addresses of the beneficiaries\n    /// @param _canRevokeAddresses Array of addresses that can revoke the dtrust\n    constructor(\n        string memory _name,\n        address _settlor,\n        address _factoryAddress,\n        address[] memory _trustees,\n        address[] memory _beneficiaries,\n        address[] memory _canRevokeAddresses\n    ) {\n        name = _name;\n        settlor = _settlor;\n        factoryAddress = _factoryAddress;\n        addTrustees(_trustees);\n        addBeneficiaries(_beneficiaries);\n        addRevokableAddresses(_canRevokeAddresses);\n        dateCreated = block.timestamp;\n        startFeeTime = block.timestamp;\n    }\n\n    /// @notice Fallback function to receive Ether\n    receive() external payable {\n        etherBalance += msg.value;\n        emit DepositedEther(msg.sender, msg.value);\n    }\n\n    /// @notice Internal function to add beneficiaries to the dtrust\n    /// @param _beneficiaries Array of beneficiary addresses\n    function addBeneficiaries(address[] memory _beneficiaries) internal {\n        for (uint i = 0; i < _beneficiaries.length; i++) {\n            beneficiariesLookup[_beneficiaries[i]] = true;\n            beneficiaries.push(_beneficiaries[i]);\n        }\n    }\n\n    /// @notice Internal function to add addresses with revocation rights\n    /// @param _canRevokeAddresses Array of addresses with permission to revoke the dtrust\n    function addRevokableAddresses(address[] memory _canRevokeAddresses) internal {\n        for(uint i = 0; i < _canRevokeAddresses.length; i++) {\n            require(trusteesLookup[_canRevokeAddresses[i]] || _canRevokeAddresses[i] == settlor, \"Address must be a trustee or the settlor\");\n            revokeAddressLookup[_canRevokeAddresses[i]] = true;\n        }\n    }\n\n    /// @notice Internal function to add trustees to the dtrust\n    /// @param _trustees Array of trustee addresses\n    function addTrustees(address[] memory _trustees) internal {\n        for (uint i = 0; i < _trustees.length; i++) {\n            trusteesLookup[_trustees[i]] = true;\n            trustees.push(_trustees[i]);\n        }\n    }\n\n    /// @notice Allows a trustee to deposit Ether into the dtrust\n    /// @dev Emits a DepositedEther event upon success\n    function depositEth() external payable isActive { \n        require(msg.value > 0, \"Deposit amount should be greater than 0\");\n        etherBalance += msg.value;\n        emit DepositedEther(msg.sender, msg.value);\n    }\n\n    /// @notice Allows a trustee to deposit ERC-20 tokens into the dtrust\n    /// @param token Address of the ERC-20 token\n    /// @param amount Amount of the ERC-20 tokens to deposit\n    /// @dev Emits a DepositedToken event upon success\n    function depositToken(address token, uint256 amount) external isActive { \n        uint256 allowedAmount = IERC20(token).allowance(msg.sender, address(this));\n        require(amount > 0, \"Enter an amount greater than 0\");\n        require(allowedAmount >= amount, \"Contract not approved to move this amount of tokens\");\n        \n        if (!tokenLookup[token]) {\n            tokenLookup[token] = true;\n            tokens.push(token);\n        }\n\n        require(IERC20(token).transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\n        emit DepositedToken(token, msg.sender, amount);\n    }\n\n    /// @notice Allows trustees to make a payout from the dtrust to a beneficiary\n    /// @param _token Address of the ERC-20 token\n    /// @param _amount Amount of the ERC-20 tokens to payout\n    /// @param _beneficiary Address of the beneficiary to receive the payout\n    /// @dev Emits a Paid event upon success\n    function payout(\n        address _token,\n        uint256 _amount,\n        address _beneficiary\n    ) external isTrustee isActive nonReentrant {   \n        require(beneficiariesLookup[_beneficiary], \"Beneficiary provided is not a beneficiary of this dtrust\");\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, \"Not enough balance of the token\");\n        require(IERC20(_token).transfer(_beneficiary, _amount), \"Token transfer failed\");\n        emit Paid(_token, _beneficiary, _amount);\n    }\n\n        /// @notice Revokes the dtrust and performs payouts of remaining balances\n    /// @dev Emits a Revoked event upon successful revocation\n    function revokeContract() external isActive nonReentrant {\n        require(revokeAddressLookup[msg.sender], \"You do not have permission to revoke\");\n        payoutAll(tokens);\n        isRevoked = true;\n        emit Revoked();\n    }\n\n    /// @notice Allows trustees to payout Ether from the dtrust to a beneficiary\n    /// @param _ethAmount Amount of Ether to payout\n    /// @param _beneficiary Address of the beneficiary to receive the Ether\n    /// @dev Emits a Paid event upon success\n    function payoutEth(uint256 _ethAmount, address _beneficiary) public isTrustee isActive nonReentrant {\n        require(beneficiariesLookup[_beneficiary], \"Beneficiary provided is not a beneficiary of this dtrust\");\n        require(_ethAmount > 0, \"Enter Eth amount > 0\");\n        require(address(this).balance >= _ethAmount, \"Not enough Ether to payout\");\n        address payable user = payable(_beneficiary);\n        user.transfer(_ethAmount);\n        etherBalance -= _ethAmount;\n        emit Paid(address(this), _beneficiary, _ethAmount);\n    }\n\n    /// @notice Allows trustees to payout remaining balances after the dtrust has been revoked\n    /// @param _tokens Array of ERC-20 token addresses to be paid out\n    /// @dev Emits Paid events for each token paid out\n    function payoutRemaining(address[] memory _tokens) external isTrustee nonReentrant {\n        require(isRevoked, \"The dtrust must be revoked before the remaining balance can be paid out\");\n        payoutAll(_tokens);\n    }\n\n    /// @notice Internal function to payout all balances of Ether and tokens to the settlor\n    /// @param _tokens Array of ERC-20 token addresses to be paid out\n    /// @dev Emits Paid events for each token paid out\n    function payoutAll(address[] memory _tokens) internal {\n        if(address(this).balance > 0){\n            address payable user = payable(settlor);\n            user.transfer(address(this).balance);\n            etherBalance -= address(this).balance;\n            emit Paid(address(this), settlor, address(this).balance);\n        }\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            address token = _tokens[i];\n            uint256 amount = IERC20(token).balanceOf(address(this));\n            \n            if(amount > 0){\n                require(IERC20(token).transfer(settlor, amount), \"Token transfer failed\");\n                emit Paid(token, settlor, amount);\n            }\n        }\n    }\n\n    /// @notice Allows an address with revocation rights to remove themselves from the list of revokable addresses\n    /// @dev Emits a RemoveRevokableAddress event upon success\n    function removeRevokableAddress() external isActive {\n        require(revokeAddressLookup[msg.sender], \"Address is not revokable\");\n        revokeAddressLookup[msg.sender] = false;\n        emit RemoveRevokableAddress(msg.sender);\n    }\n\n    /// @notice Collects an annual fee for the dtrust, payable to the bank wallet\n    /// @param _bankWallet Address of the bank wallet where fees are collected\n    /// @param _feePercentage Annual fee percentage\n    /// @dev Emits a Paid event for fee collection\n    function takeAnnualFee(address _bankWallet, uint256 _feePercentage) external isActive nonReentrant {\n        require(block.timestamp >= startFeeTime, \"Not yet time to collect fee\");\n        require(msg.sender == factoryAddress, \"You must be the control wallet\");\n        \n        uint256 feeFraction = _feePercentage.mul(1e14);\n\n        if(address(this).balance > 0 ){\n            uint256 ethFee = address(this).balance.mul(feeFraction).div(1e18);\n            payable(_bankWallet).transfer(ethFee);\n            etherBalance -= ethFee;\n            emit Paid(address(0), _bankWallet, ethFee); // address(0) denotes Ether\n        }\n        \n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\n            if(tokenBalance > 0 ){\n                uint256 tokenFee = tokenBalance.mul(feeFraction).div(1e18);\n                require(IERC20(token).transfer(_bankWallet, tokenFee), \"Token transfer failed\");\n                emit Paid(token, _bankWallet, tokenFee);\n            }\n        }\n\n        startFeeTime += 365 days;\n    }\n\n    /// @notice Retrieves information about the dtrust\n    /// @return name of the dtrust\n    /// @return settlor of the dtrust\n    /// @return list of trustees\n    /// @return list of beneficiaries\n    /// @return creation date of the dtrust\n    /// @return start time for the next fee collection\n    /// @return revocation status of the dtrust\n    /// @dev This function is view-only and does not modify state\n    function getTrustInfo() isActive public view returns (\n        string memory,\n        address, \n        address[] memory, \n        address[] memory,\n        uint256,\n        uint256,\n        bool\n    ) {\n        return (name, settlor, trustees, beneficiaries, dateCreated, startFeeTime, isRevoked);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}