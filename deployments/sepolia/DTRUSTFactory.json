{
  "address": "0x68b4A4A022EC5abD252DA3Ea54ddaF18ebBD78F1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bankWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "settlor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "DTrustCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "UserAddedToDTrust",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDTrusts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "collectAnnualFeeForTrust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_settlor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_trustees",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_canRevokeAddresses",
          "type": "address[]"
        }
      ],
      "name": "createDTRUST",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dTrustsByUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDTrustsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDTrustsByUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUserAddedToDTrust",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb588d189c8da57fbfde17331c3e6a9e80fb6631dae87260b3e22c132f6cb13a9",
  "receipt": {
    "to": null,
    "from": "0x1E7cc3B053D7e358d36264aC02daBC9F69109DdE",
    "contractAddress": "0x68b4A4A022EC5abD252DA3Ea54ddaF18ebBD78F1",
    "transactionIndex": 24,
    "gasUsed": "2361792",
    "logsBloom": "0x
    "blockHash": "0x51ca4b88cadf70f404492f41312958fe3f4509d1a573e50ba5cd0e1fcf042659",
    "transactionHash": "0xb588d189c8da57fbfde17331c3e6a9e80fb6631dae87260b3e22c132f6cb13a9",
    "logs": [],
    "blockNumber": 4554500,
    "cumulativeGasUsed": "8927395",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52dCAFA2B5de94801F66A3E665d55DbB287E0Ac3"
  ],
  "numDeployments": 3,
  "solcInputHash": "faf3bd26a3b49bc93519e1a679b2e08a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bankWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"settlor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"DTrustCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"UserAddedToDTrust\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDTrusts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"collectAnnualFeeForTrust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_settlor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_trustees\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_canRevokeAddresses\",\"type\":\"address[]\"}],\"name\":\"createDTRUST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dTrustsByUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDTrustsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDTrustsByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserAddedToDTrust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTrustFactory.sol\":\"DTRUSTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/DTrustFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DTrustV1.sol\\\";\\n\\ncontract DTRUSTFactory {\\n    address public bankWallet;\\n    // 10 represents 0.10% fee\\n    // 100 represents 1% fee\\n    // 1000 represents 10% fee\\n    uint256 public bankFee = 10;\\n    address[] public allDTrusts;\\n    mapping(address => address[]) public dTrustsByUser;\\n    mapping(address => mapping(address => bool)) public isUserAddedToDTrust;\\n\\n    event DTrustCreated(address indexed settlor, address trustAddress);\\n    event UserAddedToDTrust(address indexed user, address trustAddress);\\n\\n    constructor(\\n        address _bankWallet\\n    ) {\\n        bankWallet = _bankWallet;\\n    }\\n\\n    function createDTRUST(\\n        string calldata _name,\\n        address _settlor,\\n        address[] calldata _trustees,\\n        address[] calldata _beneficiaries,\\n        address[] calldata _canRevokeAddresses\\n    ) external {\\n        DTRUST newDTRUST = new DTRUST(\\n            _name,\\n            _settlor,\\n            address(this),\\n            _trustees,\\n            _beneficiaries,\\n            _canRevokeAddresses\\n        );\\n        allDTrusts.push(address(newDTRUST));\\n        addUniqueUser(_settlor, newDTRUST);\\n        addUniqueUsers(_trustees, newDTRUST);\\n        addUniqueUsers(_beneficiaries, newDTRUST);\\n        emit DTrustCreated(_settlor, address(newDTRUST));\\n    }\\n\\n    function addUniqueUsers(address[] calldata _users, DTRUST newDTRUST) internal {\\n        for (uint i = 0; i < _users.length; i++) {\\n            addUniqueUser(_users[i], newDTRUST);\\n        }\\n    }\\n\\n    function addUniqueUser(address _user, DTRUST newDTRUST) internal {\\n        if (!isUserAddedToDTrust[_user][address(newDTRUST)]) {\\n            dTrustsByUser[_user].push(address(newDTRUST));\\n            isUserAddedToDTrust[_user][address(newDTRUST)] = true;\\n            emit UserAddedToDTrust(_user, address(newDTRUST));\\n        }\\n    }\\n\\n    function getDTrustsByUser(address _user) external view returns (address[] memory) {\\n        return dTrustsByUser[_user];\\n    }\\n\\n    function collectAnnualFeeForTrust(address payable trustAddress) external {\\n        DTRUST(trustAddress).takeAnnualFee(bankWallet, bankFee);\\n    }\\n\\n    function getAllDTrustsCount() external view returns (uint256) {\\n        return allDTrusts.length;\\n    }\\n}\\n\",\"keccak256\":\"0x6ef56e776c12ae4f585e8f63415123ebc4b5a6b1a6a16f46162da8e1b1efd69a\",\"license\":\"MIT\"},\"contracts/DTrustV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Import the ERC-20 interface\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\\ncontract DTRUST {\\n    using SafeMath for uint256;\\n    address settlor;\\n    address factoryAddress;\\n    address[] trustees;\\n    address[] beneficiaries;\\n    address[] tokens;\\n    string name;\\n    bool public isRevoked = false;\\n    \\n    mapping(address => bool) trusteesLookup;\\n    mapping(address => bool) beneficiariesLookup;\\n    mapping(address => bool) public revokeAddressLookup;\\n    mapping(address => bool) tokenLookup;\\n\\n    uint256 etherBalance = 0;\\n    uint256 public startFeeTime;\\n    uint256 public dateCreated;\\n\\n    // Event to log the payouts\\n    event Paid(address indexed token, address indexed beneficiary, uint256 amount);\\n    event Revoked();\\n    event RemoveRevokableAddress(address indexed revokableAddress);\\n    event ReceivedEther(address indexed sender, uint256 amount);\\n    event DepositedEther(address indexed sender, uint256 amount);\\n\\n    modifier isTrustee() {\\n        require(trusteesLookup[msg.sender] == true, \\\"Only a trustee can perform this action\\\");\\n        _;\\n    }\\n\\n    modifier isActive {\\n        require(!isRevoked, \\\"The contract has been revoked\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        address _settlor,\\n        address _factoryAddress,\\n        address[] memory _trustees,\\n        address[] memory _beneficiaries,\\n        address[] memory _canRevokeAddresses\\n    ) {\\n        name = _name;\\n        settlor = _settlor;\\n        factoryAddress = _factoryAddress;\\n        addTrsutees(_trustees);\\n        addBeneficiaries(_beneficiaries);\\n        addRevokableAddresses(_canRevokeAddresses);\\n        dateCreated = block.timestamp;\\n        startFeeTime = block.timestamp;\\n    }\\n\\n    receive() external payable {\\n        etherBalance += msg.value;\\n        emit DepositedEther(msg.sender, msg.value);\\n    }\\n\\n    function addBeneficiaries(address[] memory _beneficiaries) internal {\\n        for (uint i = 0; i < _beneficiaries.length; i++) {\\n            beneficiariesLookup[_beneficiaries[i]] = true;\\n            beneficiaries.push(_beneficiaries[i]);\\n        }\\n    }\\n\\n    function addRevokableAddresses(address[] memory _canRevokeAddresses) internal {\\n        for(uint i = 0; i < _canRevokeAddresses.length; i++) {\\n            require(trusteesLookup[_canRevokeAddresses[i]] == true || _canRevokeAddresses[i] == settlor, \\\"Address must be a trustee or the settlor\\\");\\n            revokeAddressLookup[_canRevokeAddresses[i]] = true;\\n        }\\n    }\\n\\n    function addTrsutees(address[] memory _trustees) internal {\\n        for (uint i = 0; i < _trustees.length; i++) {\\n            trusteesLookup[_trustees[i]] = true;\\n            trustees.push(_trustees[i]);\\n        }\\n    }\\n\\n    function depositEth() external payable isActive { \\n        require(msg.value > 0, \\\"Deposit amount should be greater than 0\\\");\\n        etherBalance += msg.value;\\n        emit DepositedEther(msg.sender, msg.value);\\n    }\\n\\n    function depositToken(address token, uint256 amount) external isActive { \\n        // Check that the contract is approved to move the amount of tokens\\n        uint256 allowedAmount = IERC20(token).allowance(msg.sender, address(this));\\n        require(amount > 0, \\\"Enter an amount greater then 0\\\");\\n        require(allowedAmount >= amount, \\\"Contract not approved to move this amount of tokens\\\");\\n        \\n        if (tokenLookup[token] == false) {\\n            tokenLookup[token] = true;\\n            tokens.push(token);\\n        }\\n\\n        // Update the token balance in the mapping\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function payout(\\n        address _token,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external isTrustee isActive {   \\n        require(beneficiariesLookup[_beneficiary] == true, \\\"Beneficiary provided is not a beneficiary of this contract\\\");\\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, \\\"Not enough balance of the token\\\" );\\n        require(IERC20(_token).transfer(_beneficiary, _amount), \\\"Token transfer failed\\\");\\n        // Perform the payouts\\n        emit Paid(_token, _beneficiary, _amount);\\n    }\\n\\n    function revokeContract() external isActive {\\n        require(revokeAddressLookup[msg.sender] == true, \\\"You do not have permission to revoke\\\");\\n        payoutAll(tokens);\\n        isRevoked = true;\\n        emit Revoked();\\n    }\\n\\n    function payoutEth(uint256 _ethAmount,  address _beneficiary) public isTrustee isActive {\\n        require(beneficiariesLookup[_beneficiary] == true, \\\"Beneficiary provided is not a beneficiary of this contract\\\");\\n        require(_ethAmount > 0, \\\"Enter Eth amount > 0\\\");\\n        require(address(this).balance >= _ethAmount, \\\"Not enough Ether to payout\\\");\\n        address payable user = payable(_beneficiary);\\n        user.transfer(_ethAmount);\\n        etherBalance -= _ethAmount;\\n        emit Paid(address(this), _beneficiary, _ethAmount);\\n    }\\n\\n    function payoutRemaining(address[] memory _tokens) external isTrustee {\\n        payoutAll(_tokens);\\n    }\\n\\n    function payoutAll(address[] memory _tokens) internal {\\n        if(address(this).balance > 0){\\n            address payable user = payable(settlor);\\n            user.transfer(address(this).balance);\\n            etherBalance -= address(this).balance;\\n            emit Paid(address(this), settlor, address(this).balance);\\n        }\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            \\n            if(amount > 0){\\n                require(IERC20(token).transfer(settlor, amount), \\\"Token transfer failed\\\");\\n                emit Paid(token, settlor, amount);\\n            }\\n        }\\n    }\\n\\n    function removeRevokableAddress() external isActive {\\n        require(revokeAddressLookup[msg.sender] == true, \\\"Address is not revokable\\\");\\n        revokeAddressLookup[msg.sender] = false;\\n        emit RemoveRevokableAddress(msg.sender);\\n    }\\n\\n    function takeAnnualFee(address _bankWallet, uint256 _feePercentage) external isActive {\\n        require(block.timestamp >= startFeeTime, \\\"Not yet time to collect fee\\\");\\n        require(msg.sender == factoryAddress, \\\"You must be the control wallet\\\");\\n        \\n        uint256 feeFraction = _feePercentage.mul(1e14);\\n\\n        if(address(this).balance > 0 ){\\n            uint256 ethFee = address(this).balance.mul(feeFraction).div(1e18);\\n            payable(_bankWallet).transfer(ethFee);\\n            etherBalance -= ethFee;\\n            emit Paid(address(0), _bankWallet, ethFee); // address(0) denotes Ether\\n        }\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            if(tokenBalance > 0 ){\\n                uint256 tokenFee = tokenBalance.mul(feeFraction).div(1e18);\\n                require(IERC20(token).transfer(_bankWallet, tokenFee), \\\"Token transfer failed\\\");\\n                emit Paid(token, _bankWallet, tokenFee);\\n            }\\n        }\\n\\n        // Update the startFeeTime for the next year\\n        startFeeTime += 365 days;\\n    }\\n\\n\\n    function getTrustInfo() isActive public view returns (\\n        string memory,\\n        address, \\n        address[] memory, \\n        address[] memory,\\n        uint256,\\n        uint256,\\n        bool\\n    ) {\\n        return (name, settlor, trustees, beneficiaries, dateCreated, startFeeTime, isRevoked);\\n    }\\n}\\n\",\"keccak256\":\"0xab532bc7cadcf376d07eeb6516455a06c09b3fee8389640fce6e3585210ab761\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600a60015534801561001557600080fd5b5060405161299138038061299183398101604081905261003491610059565b600080546001600160a01b0319166001600160a01b0392909216919091179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b6128f9806100986000396000f3fe60806040523480156200001157600080fd5b50600436106200009f5760003560e01c806360629486116200006e57806360629486146200011c5780637fb046f61462000135578063949a546a1462000177578063d536c7351462000180578063ebe9c1b314620001a657600080fd5b8063216b465b14620000a45780632588c6cc14620000d857806329d7dab214620000f1578063391dbe5f1462000108575b600080fd5b620000bb620000b53660046200056f565b620001bd565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ef620000e93660046200059e565b620001f6565b005b620000bb62000102366004620005c5565b62000265565b600054620000bb906001600160a01b031681565b6200012660015481565b604051908152602001620000cf565b6200016662000146366004620005df565b600460209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001620000cf565b60025462000126565b62000197620001913660046200059e565b62000290565b604051620000cf91906200061d565b620000ef620001b7366004620006bb565b62000308565b60036020528160005260406000208181548110620001da57600080fd5b6000918252602090912001546001600160a01b03169150829050565b600054600154604051634b02b47960e01b81526001600160a01b039283166004820152602481019190915290821690634b02b47990604401600060405180830381600087803b1580156200024957600080fd5b505af11580156200025e573d6000803e3d6000fd5b5050505050565b600281815481106200027657600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015620002fc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620002dd575b50505050509050919050565b6000898989308a8a8a8a8a8a604051620003229062000536565b620003379a999897969594939291906200081d565b604051809103906000f08015801562000354573d6000803e3d6000fd5b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0383161790559050620003ae888262000414565b620003bb878783620004d8565b620003c8858583620004d8565b6040516001600160a01b0382811682528916907f06b0b86b2403d8d421b36a82fccdccfc8673d474779abc4753b43abeaa7732539060200160405180910390a250505050505050505050565b6001600160a01b0380831660009081526004602090815260408083209385168352929052205460ff16620004d4576001600160a01b0382811660008181526003602090815260408083208054600180820183559185528385200180546001600160a01b031916968816968717905584845260048352818420868552835292819020805460ff1916909317909255905192835290917f3d725e612e8f113d672543da0d8e2bef6bf329ed1d81efe5eb8cc78fa7b34483910160405180910390a25b5050565b60005b8281101562000530576200051b848483818110620004fd57620004fd620008b4565b90506020020160208101906200051491906200059e565b8362000414565b806200052781620008ca565b915050620004db565b50505050565b611fd180620008f383390190565b6001600160a01b03811681146200055a57600080fd5b50565b80356200056a8162000544565b919050565b600080604083850312156200058357600080fd5b8235620005908162000544565b946020939093013593505050565b600060208284031215620005b157600080fd5b8135620005be8162000544565b9392505050565b600060208284031215620005d857600080fd5b5035919050565b60008060408385031215620005f357600080fd5b8235620006008162000544565b91506020830135620006128162000544565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015620006605783516001600160a01b03168352928401929184019160010162000639565b50909695505050505050565b60008083601f8401126200067f57600080fd5b50813567ffffffffffffffff8111156200069857600080fd5b6020830191508360208260051b8501011115620006b457600080fd5b9250929050565b600080600080600080600080600060a08a8c031215620006da57600080fd5b893567ffffffffffffffff80821115620006f357600080fd5b818c0191508c601f8301126200070857600080fd5b8135818111156200071857600080fd5b8d60208285010111156200072b57600080fd5b602083019b50809a50506200074360208d016200055d565b985060408c01359150808211156200075a57600080fd5b620007688d838e016200066c565b909850965060608c01359150808211156200078257600080fd5b620007908d838e016200066c565b909650945060808c0135915080821115620007aa57600080fd5b50620007b98c828d016200066c565b915080935050809150509295985092959850929598565b8183526000602080850194508260005b8581101562000812578135620007f68162000544565b6001600160a01b031687529582019590820190600101620007e0565b509495945050505050565b60c081528960c0820152898b60e0830137600060e08b830181018290526001600160a01b038b811660208501528a166040840152601f8c01601f19168301838103820160608501529062000875908201898b620007d0565b905082810360808401526200088c818789620007d0565b905082810360a0840152620008a3818587620007d0565b9d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620008eb57634e487b7160e01b600052601160045260246000fd5b506001019056fe60806040526006805460ff191690556000600b553480156200002057600080fd5b5060405162001fd138038062001fd1833981016040819052620000439162000533565b60056200005187826200069f565b50600080546001600160a01b038088166001600160a01b03199283161790925560018054928716929091169190911790556200008d83620000b9565b62000098826200018b565b620000a38162000259565b505042600d819055600c5550620007a992505050565b60005b81518110156200018757600160076000848481518110620000e157620000e16200076b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060028282815181106200013757620001376200076b565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055806200017e8162000781565b915050620000bc565b5050565b60005b81518110156200018757600160086000848481518110620001b357620001b36200076b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060038282815181106200020957620002096200076b565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620002508162000781565b9150506200018e565b60005b81518110156200018757600760008383815181106200027f576200027f6200076b565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16151560011480620002eb575060005482516001600160a01b0390911690839083908110620002d857620002d86200076b565b60200260200101516001600160a01b0316145b6200034d5760405162461bcd60e51b815260206004820152602860248201527f41646472657373206d75737420626520612074727573746565206f72207468656044820152671039b2ba3a3637b960c11b606482015260840160405180910390fd5b6001600960008484815181106200036857620003686200076b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620003a68162000781565b9150506200025c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003f057620003f0620003af565b604052919050565b600082601f8301126200040a57600080fd5b81516001600160401b03811115620004265762000426620003af565b60206200043c601f8301601f19168201620003c5565b82815285828487010111156200045157600080fd5b60005b838110156200047157858101830151828201840152820162000454565b506000928101909101919091529392505050565b80516001600160a01b03811681146200049d57600080fd5b919050565b600082601f830112620004b457600080fd5b815160206001600160401b03821115620004d257620004d2620003af565b8160051b620004e3828201620003c5565b9283528481018201928281019087851115620004fe57600080fd5b83870192505b848310156200052857620005188362000485565b8252918301919083019062000504565b979650505050505050565b60008060008060008060c087890312156200054d57600080fd5b86516001600160401b03808211156200056557600080fd5b620005738a838b01620003f8565b97506200058360208a0162000485565b96506200059360408a0162000485565b95506060890151915080821115620005aa57600080fd5b620005b88a838b01620004a2565b94506080890151915080821115620005cf57600080fd5b620005dd8a838b01620004a2565b935060a0890151915080821115620005f457600080fd5b506200060389828a01620004a2565b9150509295509295509295565b600181811c908216806200062557607f821691505b6020821081036200064657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200069a57600081815260208120601f850160051c81016020861015620006755750805b601f850160051c820191505b81811015620006965782815560010162000681565b5050505b505050565b81516001600160401b03811115620006bb57620006bb620003af565b620006d381620006cc845462000610565b846200064c565b602080601f8311600181146200070b5760008415620006f25750858301515b600019600386901b1c1916600185901b17855562000696565b600085815260208120601f198616915b828110156200073c578886015182559484019460019091019084016200071b565b50858210156200075b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201620007a257634e487b7160e01b600052601160045260246000fd5b5060010190565b61181880620007b96000396000f3fe6080604052600436106100c65760003560e01c8063895706b81161007f578063c2d1faeb11610059578063c2d1faeb14610248578063cbc8ea8c14610268578063d3dc824214610288578063e39d3c181461029e57600080fd5b8063895706b8146101d05780638d17016e146101f05780639c5e28161461021857600080fd5b80631f741c7a1461011e5780632bc9ed0214610147578063338b5dea14610171578063439370b1146101935780634b02b4791461019b57806366625bbd146101bb57600080fd5b366101195734600b60008282546100dd9190611323565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2005b600080fd5b34801561012a57600080fd5b50610134600d5481565b6040519081526020015b60405180910390f35b34801561015357600080fd5b506006546101619060ff1681565b604051901515815260200161013e565b34801561017d57600080fd5b5061019161018c366004611352565b6102b3565b005b610191610515565b3480156101a757600080fd5b506101916101b6366004611352565b6105e6565b3480156101c757600080fd5b5061019161092e565b3480156101dc57600080fd5b506101916101eb366004611392565b610a5c565b3480156101fc57600080fd5b50610205610a9c565b60405161013e979695949392919061149b565b34801561022457600080fd5b5061016161023336600461153f565b60096020526000908152604090205460ff1681565b34801561025457600080fd5b5061019161026336600461155a565b610c59565b34801561027457600080fd5b50610191610283366004611586565b610e08565b34801561029457600080fd5b50610134600c5481565b3480156102aa57600080fd5b50610191611016565b60065460ff16156102df5760405162461bcd60e51b81526004016102d6906115c2565b60405180910390fd5b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa15801561032c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035091906115f9565b9050600082116103a25760405162461bcd60e51b815260206004820152601e60248201527f456e74657220616e20616d6f756e742067726561746572207468656e2030000060448201526064016102d6565b8181101561040e5760405162461bcd60e51b815260206004820152603360248201527f436f6e7472616374206e6f7420617070726f76656420746f206d6f7665207468604482015272697320616d6f756e74206f6620746f6b656e7360681b60648201526084016102d6565b6001600160a01b0383166000908152600a602052604081205460ff1615159003610498576001600160a01b0383166000818152600a60205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191690911790555b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190611612565b50505050565b60065460ff16156105385760405162461bcd60e51b81526004016102d6906115c2565b600034116105985760405162461bcd60e51b815260206004820152602760248201527f4465706f73697420616d6f756e742073686f756c6420626520677265617465726044820152660207468616e20360cc1b60648201526084016102d6565b34600b60008282546105aa9190611323565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2565b60065460ff16156106095760405162461bcd60e51b81526004016102d6906115c2565b600c5442101561065b5760405162461bcd60e51b815260206004820152601b60248201527f4e6f74207965742074696d6520746f20636f6c6c65637420666565000000000060448201526064016102d6565b6001546001600160a01b031633146106b55760405162461bcd60e51b815260206004820152601e60248201527f596f75206d7573742062652074686520636f6e74726f6c2077616c6c6574000060448201526064016102d6565b60006106c782655af3107a40006110dc565b9050471561076f5760006106ed670de0b6b3a76400006106e747856110dc565b906110f1565b6040519091506001600160a01b0385169082156108fc029083906000818181858888f19350505050158015610726573d6000803e3d6000fd5b5080600b6000828254610739919061163b565b90915550506040518181526001600160a01b038516906000906000805160206117c38339815191529060200160405180910390a3505b60005b60045481101561090d576000600482815481106107915761079161164e565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080891906115f9565b905080156108f8576000610828670de0b6b3a76400006106e784886110dc565b60405163a9059cbb60e01b81526001600160a01b038981166004830152602482018390529192509084169063a9059cbb906044016020604051808303816000875af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f9190611612565b6108bb5760405162461bcd60e51b81526004016102d690611664565b866001600160a01b0316836001600160a01b03166000805160206117c3833981519152836040516108ee91815260200190565b60405180910390a3505b5050808061090590611693565b915050610772565b506301e13380600c60008282546109249190611323565b9091555050505050565b60065460ff16156109515760405162461bcd60e51b81526004016102d6906115c2565b3360009081526009602052604090205460ff1615156001146109c15760405162461bcd60e51b8152602060048201526024808201527f596f7520646f206e6f742068617665207065726d697373696f6e20746f207265604482015263766f6b6560e01b60648201526084016102d6565b610a246004805480602002602001604051908101604052809291908181526020018280548015610a1a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109fc575b50505050506110fd565b6006805460ff191660011790556040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a1565b3360009081526007602052604090205460ff161515600114610a905760405162461bcd60e51b81526004016102d6906116ac565b610a99816110fd565b50565b606060006060806000806000600660009054906101000a900460ff1615610ad55760405162461bcd60e51b81526004016102d6906115c2565b600054600d54600c546006546005805490946001600160a01b0316936002936003939192909160ff16908790610b0a906116f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b36906116f2565b8015610b835780601f10610b5857610100808354040283529160200191610b83565b820191906000526020600020905b815481529060010190602001808311610b6657829003601f168201915b5050505050965084805480602002602001604051908101604052809291908181526020018280548015610bdf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bc1575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015610c3b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c1d575b50505050509350965096509650965096509650965090919293949596565b3360009081526007602052604090205460ff161515600114610c8d5760405162461bcd60e51b81526004016102d6906116ac565b60065460ff1615610cb05760405162461bcd60e51b81526004016102d6906115c2565b6001600160a01b03811660009081526008602052604090205460ff161515600114610ced5760405162461bcd60e51b81526004016102d69061172c565b60008211610d345760405162461bcd60e51b81526020600482015260146024820152730456e7465722045746820616d6f756e74203e20360641b60448201526064016102d6565b81471015610d845760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820457468657220746f207061796f757400000000000060448201526064016102d6565b60405181906001600160a01b0382169084156108fc029085906000818181858888f19350505050158015610dbc573d6000803e3d6000fd5b5082600b6000828254610dcf919061163b565b90915550506040518381526001600160a01b0383169030906000805160206117c3833981519152906020015b60405180910390a3505050565b3360009081526007602052604090205460ff161515600114610e3c5760405162461bcd60e51b81526004016102d6906116ac565b60065460ff1615610e5f5760405162461bcd60e51b81526004016102d6906115c2565b6001600160a01b03811660009081526008602052604090205460ff161515600114610e9c5760405162461bcd60e51b81526004016102d69061172c565b6040516370a0823160e01b815230600482015282906001600160a01b038516906370a0823190602401602060405180830381865afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0691906115f9565b1015610f545760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f7567682062616c616e6365206f662074686520746f6b656e0060448201526064016102d6565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190611612565b610fe35760405162461bcd60e51b81526004016102d690611664565b806001600160a01b0316836001600160a01b03166000805160206117c383398151915284604051610dfb91815260200190565b60065460ff16156110395760405162461bcd60e51b81526004016102d6906115c2565b3360009081526009602052604090205460ff16151560011461109d5760405162461bcd60e51b815260206004820152601860248201527f41646472657373206973206e6f74207265766f6b61626c65000000000000000060448201526064016102d6565b33600081815260096020526040808220805460ff19169055517f1e7dee237a3cc3247433f2b9432eee0f61b4039316e4d644828f5cb77edd7dbd9190a2565b60006110e88284611789565b90505b92915050565b60006110e882846117a0565b471561118c57600080546040516001600160a01b039091169182914780156108fc0292909190818181858888f19350505050158015611140573d6000803e3d6000fd5b5047600b6000828254611153919061163b565b90915550506000546040514781526001600160a01b039091169030906000805160206117c38339815191529060200160405180910390a3505b60005b81518110156113095760008282815181106111ac576111ac61164e565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122591906115f9565b905080156112f45760005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af1158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190611612565b6112c05760405162461bcd60e51b81526004016102d690611664565b6000546040518281526001600160a01b03918216918416906000805160206117c38339815191529060200160405180910390a35b5050808061130190611693565b91505061118f565b5050565b634e487b7160e01b600052601160045260246000fd5b808201808211156110eb576110eb61130d565b80356001600160a01b038116811461134d57600080fd5b919050565b6000806040838503121561136557600080fd5b61136e83611336565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156113a557600080fd5b823567ffffffffffffffff808211156113bd57600080fd5b818501915085601f8301126113d157600080fd5b8135818111156113e3576113e361137c565b8060051b604051601f19603f830116810181811085821117156114085761140861137c565b60405291825284820192508381018501918883111561142657600080fd5b938501935b8285101561144b5761143c85611336565b8452938501939285019261142b565b98975050505050505050565b600081518084526020808501945080840160005b838110156114905781516001600160a01b03168752958201959082019060010161146b565b509495945050505050565b60e08152600088518060e084015260005b818110156114ca576020818c018101516101008684010152016114ac565b506101006000818386010152601f19601f830116840191506114f7602085018b6001600160a01b03169052565b8084830301604085015261150d8183018a611457565b91505082810360608401526115228188611457565b9150508460808301528360a083015261144b60c083018415159052565b60006020828403121561155157600080fd5b6110e882611336565b6000806040838503121561156d57600080fd5b8235915061157d60208401611336565b90509250929050565b60008060006060848603121561159b57600080fd5b6115a484611336565b9250602084013591506115b960408501611336565b90509250925092565b6020808252601d908201527f54686520636f6e747261637420686173206265656e207265766f6b6564000000604082015260600190565b60006020828403121561160b57600080fd5b5051919050565b60006020828403121561162457600080fd5b8151801515811461163457600080fd5b9392505050565b818103818111156110eb576110eb61130d565b634e487b7160e01b600052603260045260246000fd5b602080825260159082015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6000600182016116a5576116a561130d565b5060010190565b60208082526026908201527f4f6e6c79206120747275737465652063616e20706572666f726d20746869732060408201526530b1ba34b7b760d11b606082015260800190565b600181811c9082168061170657607f821691505b60208210810361172657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252603a908201527f42656e65666963696172792070726f7669646564206973206e6f74206120626560408201527f6e6566696369617279206f66207468697320636f6e7472616374000000000000606082015260800190565b80820281158282048414176110eb576110eb61130d565b6000826117bd57634e487b7160e01b600052601260045260246000fd5b50049056fe9def4e2802183d68ce90a6a226a2962b59298616c27165f12c4fbc5c84cdd778a2646970667358221220568e059d7f8fc5260b89184fe94af46f28408a857ebf2c46641c8f4fdf73599764736f6c63430008110033a2646970667358221220a96ee1b0dc42ace3f48b5ed9838cd591e8a88743f7f2d7b3037078677ae0ee6364736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 316,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "bankWallet",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "bankFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 322,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "allDTrusts",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 327,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "dTrustsByUser",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "isUserAddedToDTrust",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}