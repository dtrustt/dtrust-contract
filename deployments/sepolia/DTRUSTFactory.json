{
  "address": "0x23ba482030986DBDa9Ab649432333C9cfE571F8E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bankWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "settlor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "DTrustCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "UserAddedToDTrust",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDTrusts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "collectAnnualFeeForTrust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_settlor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_trustees",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_canRevokeAddresses",
          "type": "address[]"
        }
      ],
      "name": "createDTRUST",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dTrustsByUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDTrustsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDTrustsByUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUserAddedToDTrust",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x931731d191a13c8ac1c1b044ab9f4b3caefe467014753dfb2a9a22e3f3d3679f",
  "receipt": {
    "to": null,
    "from": "0x1E7cc3B053D7e358d36264aC02daBC9F69109DdE",
    "contractAddress": "0x23ba482030986DBDa9Ab649432333C9cfE571F8E",
    "transactionIndex": 16,
    "gasUsed": "2431305",
    "logsBloom": "0x
    "blockHash": "0xa4337f02ada977fb8a8cdcf1d456f057b56f960507fd0c6ae2ab728db75a3a91",
    "transactionHash": "0x931731d191a13c8ac1c1b044ab9f4b3caefe467014753dfb2a9a22e3f3d3679f",
    "logs": [],
    "blockNumber": 4649546,
    "cumulativeGasUsed": "6446595",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52dCAFA2B5de94801F66A3E665d55DbB287E0Ac3"
  ],
  "numDeployments": 4,
  "solcInputHash": "77efd8feda21be4077f4e6d6051933f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bankWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"settlor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"DTrustCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"UserAddedToDTrust\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDTrusts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"collectAnnualFeeForTrust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_settlor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_trustees\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_canRevokeAddresses\",\"type\":\"address[]\"}],\"name\":\"createDTRUST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dTrustsByUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDTrustsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDTrustsByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserAddedToDTrust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTrustFactory.sol\":\"DTRUSTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/DTrustFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DTrustV1.sol\\\";\\n\\ncontract DTRUSTFactory {\\n    address public bankWallet;\\n    // 10 represents 0.10% fee\\n    // 100 represents 1% fee\\n    // 1000 represents 10% fee\\n    uint256 public bankFee = 10;\\n    address[] public allDTrusts;\\n    mapping(address => address[]) public dTrustsByUser;\\n    mapping(address => mapping(address => bool)) public isUserAddedToDTrust;\\n\\n    event DTrustCreated(address indexed settlor, address trustAddress);\\n    event UserAddedToDTrust(address indexed user, address trustAddress);\\n\\n    constructor(\\n        address _bankWallet\\n    ) {\\n        bankWallet = _bankWallet;\\n    }\\n\\n    function createDTRUST(\\n        string calldata _name,\\n        address _settlor,\\n        address[] calldata _trustees,\\n        address[] calldata _beneficiaries,\\n        address[] calldata _canRevokeAddresses\\n    ) external {\\n        DTRUST newDTRUST = new DTRUST(\\n            _name,\\n            _settlor,\\n            address(this),\\n            _trustees,\\n            _beneficiaries,\\n            _canRevokeAddresses\\n        );\\n        allDTrusts.push(address(newDTRUST));\\n        addUniqueUser(_settlor, newDTRUST);\\n        addUniqueUsers(_trustees, newDTRUST);\\n        addUniqueUsers(_beneficiaries, newDTRUST);\\n        emit DTrustCreated(_settlor, address(newDTRUST));\\n    }\\n\\n    function addUniqueUsers(address[] calldata _users, DTRUST newDTRUST) internal {\\n        for (uint i = 0; i < _users.length; i++) {\\n            addUniqueUser(_users[i], newDTRUST);\\n        }\\n    }\\n\\n    function addUniqueUser(address _user, DTRUST newDTRUST) internal {\\n        if (!isUserAddedToDTrust[_user][address(newDTRUST)]) {\\n            dTrustsByUser[_user].push(address(newDTRUST));\\n            isUserAddedToDTrust[_user][address(newDTRUST)] = true;\\n            emit UserAddedToDTrust(_user, address(newDTRUST));\\n        }\\n    }\\n\\n    function getDTrustsByUser(address _user) external view returns (address[] memory) {\\n        return dTrustsByUser[_user];\\n    }\\n\\n    function collectAnnualFeeForTrust(address payable trustAddress) external {\\n        DTRUST(trustAddress).takeAnnualFee(bankWallet, bankFee);\\n    }\\n\\n    function getAllDTrustsCount() external view returns (uint256) {\\n        return allDTrusts.length;\\n    }\\n}\\n\",\"keccak256\":\"0x6ef56e776c12ae4f585e8f63415123ebc4b5a6b1a6a16f46162da8e1b1efd69a\",\"license\":\"MIT\"},\"contracts/DTrustV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// Import the ERC-20 interface\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\\ncontract DTRUST is ReentrancyGuard{\\n    using SafeMath for uint256;\\n    address settlor;\\n    address factoryAddress;\\n    address[] trustees;\\n    address[] beneficiaries;\\n    address[] tokens;\\n    string name;\\n    bool public isRevoked = false;\\n    \\n    mapping(address => bool) trusteesLookup;\\n    mapping(address => bool) beneficiariesLookup;\\n    mapping(address => bool) public revokeAddressLookup;\\n    mapping(address => bool) tokenLookup;\\n\\n    uint256 etherBalance = 0;\\n    uint256 public startFeeTime;\\n    uint256 public dateCreated;\\n\\n    // Event to log the payouts\\n    event Paid(address indexed token, address indexed beneficiary, uint256 amount);\\n    event Revoked();\\n    event RemoveRevokableAddress(address indexed revokableAddress);\\n    event ReceivedEther(address indexed sender, uint256 amount);\\n    event DepositedEther(address indexed sender, uint256 amount);\\n\\n    modifier isTrustee() {\\n        require(trusteesLookup[msg.sender] == true, \\\"Only a trustee can perform this action\\\");\\n        _;\\n    }\\n\\n    modifier isActive {\\n        require(!isRevoked, \\\"The contract has been revoked\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        address _settlor,\\n        address _factoryAddress,\\n        address[] memory _trustees,\\n        address[] memory _beneficiaries,\\n        address[] memory _canRevokeAddresses\\n    ) {\\n        name = _name;\\n        settlor = _settlor;\\n        factoryAddress = _factoryAddress;\\n        addTrustees(_trustees);\\n        addBeneficiaries(_beneficiaries);\\n        addRevokableAddresses(_canRevokeAddresses);\\n        dateCreated = block.timestamp;\\n        startFeeTime = block.timestamp;\\n    }\\n\\n    receive() external payable {\\n        etherBalance += msg.value;\\n        emit DepositedEther(msg.sender, msg.value);\\n    }\\n\\n    function addBeneficiaries(address[] memory _beneficiaries) internal {\\n        for (uint i = 0; i < _beneficiaries.length; i++) {\\n            beneficiariesLookup[_beneficiaries[i]] = true;\\n            beneficiaries.push(_beneficiaries[i]);\\n        }\\n    }\\n\\n    function addRevokableAddresses(address[] memory _canRevokeAddresses) internal {\\n        for(uint i = 0; i < _canRevokeAddresses.length; i++) {\\n            require(trusteesLookup[_canRevokeAddresses[i]] == true || _canRevokeAddresses[i] == settlor, \\\"Address must be a trustee or the settlor\\\");\\n            revokeAddressLookup[_canRevokeAddresses[i]] = true;\\n        }\\n    }\\n\\n    function addTrustees(address[] memory _trustees) internal {\\n        for (uint i = 0; i < _trustees.length; i++) {\\n            trusteesLookup[_trustees[i]] = true;\\n            trustees.push(_trustees[i]);\\n        }\\n    }\\n\\n    function depositEth() external payable isActive { \\n        require(msg.value > 0, \\\"Deposit amount should be greater than 0\\\");\\n        etherBalance += msg.value;\\n        emit DepositedEther(msg.sender, msg.value);\\n    }\\n\\n    function depositToken(address token, uint256 amount) external isActive { \\n        // Check that the contract is approved to move the amount of tokens\\n        uint256 allowedAmount = IERC20(token).allowance(msg.sender, address(this));\\n        require(amount > 0, \\\"Enter an amount greater then 0\\\");\\n        require(allowedAmount >= amount, \\\"Contract not approved to move this amount of tokens\\\");\\n        \\n        if (tokenLookup[token] == false) {\\n            tokenLookup[token] = true;\\n            tokens.push(token);\\n        }\\n\\n        // Update the token balance in the mapping\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function payout(\\n        address _token,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external isTrustee isActive nonReentrant {   \\n        require(beneficiariesLookup[_beneficiary] == true, \\\"Beneficiary provided is not a beneficiary of this contract\\\");\\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, \\\"Not enough balance of the token\\\" );\\n        require(IERC20(_token).transfer(_beneficiary, _amount), \\\"Token transfer failed\\\");\\n        // Perform the payouts\\n        emit Paid(_token, _beneficiary, _amount);\\n    }\\n\\n    function revokeContract() external isActive nonReentrant {\\n        require(revokeAddressLookup[msg.sender] == true, \\\"You do not have permission to revoke\\\");\\n        payoutAll(tokens);\\n        isRevoked = true;\\n        emit Revoked();\\n    }\\n\\n    function payoutEth(uint256 _ethAmount,  address _beneficiary) public isTrustee isActive nonReentrant {\\n        require(beneficiariesLookup[_beneficiary] == true, \\\"Beneficiary provided is not a beneficiary of this contract\\\");\\n        require(_ethAmount > 0, \\\"Enter Eth amount > 0\\\");\\n        require(address(this).balance >= _ethAmount, \\\"Not enough Ether to payout\\\");\\n        address payable user = payable(_beneficiary);\\n        user.transfer(_ethAmount);\\n        etherBalance -= _ethAmount;\\n        emit Paid(address(this), _beneficiary, _ethAmount);\\n    }\\n\\n    function payoutRemaining(address[] memory _tokens) external isTrustee nonReentrant {\\n        require(isRevoked, \\\"The payout must be revoked, before the remaining balance can be paid out\\\");\\n        payoutAll(_tokens);\\n    }\\n\\n    function payoutAll(address[] memory _tokens) internal {\\n        if(address(this).balance > 0){\\n            address payable user = payable(settlor);\\n            user.transfer(address(this).balance);\\n            etherBalance -= address(this).balance;\\n            emit Paid(address(this), settlor, address(this).balance);\\n        }\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            \\n            if(amount > 0){\\n                require(IERC20(token).transfer(settlor, amount), \\\"Token transfer failed\\\");\\n                emit Paid(token, settlor, amount);\\n            }\\n        }\\n    }\\n\\n    function removeRevokableAddress() external isActive {\\n        require(revokeAddressLookup[msg.sender] == true, \\\"Address is not revokable\\\");\\n        revokeAddressLookup[msg.sender] = false;\\n        emit RemoveRevokableAddress(msg.sender);\\n    }\\n\\n    function takeAnnualFee(address _bankWallet, uint256 _feePercentage) external isActive nonReentrant {\\n        require(block.timestamp >= startFeeTime, \\\"Not yet time to collect fee\\\");\\n        require(msg.sender == factoryAddress, \\\"You must be the control wallet\\\");\\n        \\n        uint256 feeFraction = _feePercentage.mul(1e14);\\n\\n        if(address(this).balance > 0 ){\\n            uint256 ethFee = address(this).balance.mul(feeFraction).div(1e18);\\n            payable(_bankWallet).transfer(ethFee);\\n            etherBalance -= ethFee;\\n            emit Paid(address(0), _bankWallet, ethFee); // address(0) denotes Ether\\n        }\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            if(tokenBalance > 0 ){\\n                uint256 tokenFee = tokenBalance.mul(feeFraction).div(1e18);\\n                require(IERC20(token).transfer(_bankWallet, tokenFee), \\\"Token transfer failed\\\");\\n                emit Paid(token, _bankWallet, tokenFee);\\n            }\\n        }\\n\\n        // Update the startFeeTime for the next year\\n        startFeeTime += 365 days;\\n    }\\n\\n\\n    function getTrustInfo() isActive public view returns (\\n        string memory,\\n        address, \\n        address[] memory, \\n        address[] memory,\\n        uint256,\\n        uint256,\\n        bool\\n    ) {\\n        return (name, settlor, trustees, beneficiaries, dateCreated, startFeeTime, isRevoked);\\n    }\\n}\\n\",\"keccak256\":\"0x4b9cb2d9d56b50db77622f09067da4b5052a7f3bea63d09c3bdd1c97f9976f0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600a60015534801561001557600080fd5b50604051612ad3380380612ad383398101604081905261003491610059565b600080546001600160a01b0319166001600160a01b0392909216919091179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b612a3b806100986000396000f3fe60806040523480156200001157600080fd5b50600436106200009f5760003560e01c806360629486116200006e57806360629486146200011c5780637fb046f61462000135578063949a546a1462000177578063d536c7351462000180578063ebe9c1b314620001a657600080fd5b8063216b465b14620000a45780632588c6cc14620000d857806329d7dab214620000f1578063391dbe5f1462000108575b600080fd5b620000bb620000b53660046200056f565b620001bd565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ef620000e93660046200059e565b620001f6565b005b620000bb62000102366004620005c5565b62000265565b600054620000bb906001600160a01b031681565b6200012660015481565b604051908152602001620000cf565b6200016662000146366004620005df565b600460209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001620000cf565b60025462000126565b62000197620001913660046200059e565b62000290565b604051620000cf91906200061d565b620000ef620001b7366004620006bb565b62000308565b60036020528160005260406000208181548110620001da57600080fd5b6000918252602090912001546001600160a01b03169150829050565b600054600154604051634b02b47960e01b81526001600160a01b039283166004820152602481019190915290821690634b02b47990604401600060405180830381600087803b1580156200024957600080fd5b505af11580156200025e573d6000803e3d6000fd5b5050505050565b600281815481106200027657600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015620002fc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620002dd575b50505050509050919050565b6000898989308a8a8a8a8a8a604051620003229062000536565b620003379a999897969594939291906200081d565b604051809103906000f08015801562000354573d6000803e3d6000fd5b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0383161790559050620003ae888262000414565b620003bb878783620004d8565b620003c8858583620004d8565b6040516001600160a01b0382811682528916907f06b0b86b2403d8d421b36a82fccdccfc8673d474779abc4753b43abeaa7732539060200160405180910390a250505050505050505050565b6001600160a01b0380831660009081526004602090815260408083209385168352929052205460ff16620004d4576001600160a01b0382811660008181526003602090815260408083208054600180820183559185528385200180546001600160a01b031916968816968717905584845260048352818420868552835292819020805460ff1916909317909255905192835290917f3d725e612e8f113d672543da0d8e2bef6bf329ed1d81efe5eb8cc78fa7b34483910160405180910390a25b5050565b60005b8281101562000530576200051b848483818110620004fd57620004fd620008b4565b90506020020160208101906200051491906200059e565b8362000414565b806200052781620008ca565b915050620004db565b50505050565b61211380620008f383390190565b6001600160a01b03811681146200055a57600080fd5b50565b80356200056a8162000544565b919050565b600080604083850312156200058357600080fd5b8235620005908162000544565b946020939093013593505050565b600060208284031215620005b157600080fd5b8135620005be8162000544565b9392505050565b600060208284031215620005d857600080fd5b5035919050565b60008060408385031215620005f357600080fd5b8235620006008162000544565b91506020830135620006128162000544565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015620006605783516001600160a01b03168352928401929184019160010162000639565b50909695505050505050565b60008083601f8401126200067f57600080fd5b50813567ffffffffffffffff8111156200069857600080fd5b6020830191508360208260051b8501011115620006b457600080fd5b9250929050565b600080600080600080600080600060a08a8c031215620006da57600080fd5b893567ffffffffffffffff80821115620006f357600080fd5b818c0191508c601f8301126200070857600080fd5b8135818111156200071857600080fd5b8d60208285010111156200072b57600080fd5b602083019b50809a50506200074360208d016200055d565b985060408c01359150808211156200075a57600080fd5b620007688d838e016200066c565b909850965060608c01359150808211156200078257600080fd5b620007908d838e016200066c565b909650945060808c0135915080821115620007aa57600080fd5b50620007b98c828d016200066c565b915080935050809150509295985092959850929598565b8183526000602080850194508260005b8581101562000812578135620007f68162000544565b6001600160a01b031687529582019590820190600101620007e0565b509495945050505050565b60c081528960c0820152898b60e0830137600060e08b830181018290526001600160a01b038b811660208501528a166040840152601f8c01601f19168301838103820160608501529062000875908201898b620007d0565b905082810360808401526200088c818789620007d0565b905082810360a0840152620008a3818587620007d0565b9d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620008eb57634e487b7160e01b600052601160045260246000fd5b506001019056fe60806040526007805460ff191690556000600c553480156200002057600080fd5b506040516200211338038062002113833981016040819052620000439162000538565b60016000556006620000568782620006a4565b50600180546001600160a01b038088166001600160a01b03199283161790925560028054928716929091169190911790556200009283620000be565b6200009d8262000190565b620000a8816200025e565b505042600e819055600d5550620007ae92505050565b60005b81518110156200018c57600160086000848481518110620000e657620000e662000770565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060038282815181106200013c576200013c62000770565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620001838162000786565b915050620000c1565b5050565b60005b81518110156200018c57600160096000848481518110620001b857620001b862000770565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060048282815181106200020e576200020e62000770565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620002558162000786565b91505062000193565b60005b81518110156200018c576008600083838151811062000284576200028462000770565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16151560011480620002f0575060015482516001600160a01b0390911690839083908110620002dd57620002dd62000770565b60200260200101516001600160a01b0316145b620003525760405162461bcd60e51b815260206004820152602860248201527f41646472657373206d75737420626520612074727573746565206f72207468656044820152671039b2ba3a3637b960c11b606482015260840160405180910390fd5b6001600a60008484815181106200036d576200036d62000770565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620003ab8162000786565b91505062000261565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003f557620003f5620003b4565b604052919050565b600082601f8301126200040f57600080fd5b81516001600160401b038111156200042b576200042b620003b4565b602062000441601f8301601f19168201620003ca565b82815285828487010111156200045657600080fd5b60005b838110156200047657858101830151828201840152820162000459565b506000928101909101919091529392505050565b80516001600160a01b0381168114620004a257600080fd5b919050565b600082601f830112620004b957600080fd5b815160206001600160401b03821115620004d757620004d7620003b4565b8160051b620004e8828201620003ca565b92835284810182019282810190878511156200050357600080fd5b83870192505b848310156200052d576200051d836200048a565b8252918301919083019062000509565b979650505050505050565b60008060008060008060c087890312156200055257600080fd5b86516001600160401b03808211156200056a57600080fd5b620005788a838b01620003fd565b97506200058860208a016200048a565b96506200059860408a016200048a565b95506060890151915080821115620005af57600080fd5b620005bd8a838b01620004a7565b94506080890151915080821115620005d457600080fd5b620005e28a838b01620004a7565b935060a0890151915080821115620005f957600080fd5b506200060889828a01620004a7565b9150509295509295509295565b600181811c908216806200062a57607f821691505b6020821081036200064b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200069f57600081815260208120601f850160051c810160208610156200067a5750805b601f850160051c820191505b818110156200069b5782815560010162000686565b5050505b505050565b81516001600160401b03811115620006c057620006c0620003b4565b620006d881620006d1845462000615565b8462000651565b602080601f831160018114620007105760008415620006f75750858301515b600019600386901b1c1916600185901b1785556200069b565b600085815260208120601f198616915b82811015620007415788860151825594840194600190910190840162000720565b5085821015620007605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201620007a757634e487b7160e01b600052601160045260246000fd5b5060010190565b61195580620007be6000396000f3fe6080604052600436106100c65760003560e01c8063895706b81161007f578063c2d1faeb11610059578063c2d1faeb14610248578063cbc8ea8c14610268578063d3dc824214610288578063e39d3c181461029e57600080fd5b8063895706b8146101d05780638d17016e146101f05780639c5e28161461021857600080fd5b80631f741c7a1461011e5780632bc9ed0214610147578063338b5dea14610171578063439370b1146101935780634b02b4791461019b57806366625bbd146101bb57600080fd5b366101195734600c60008282546100dd9190611460565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2005b600080fd5b34801561012a57600080fd5b50610134600e5481565b6040519081526020015b60405180910390f35b34801561015357600080fd5b506007546101619060ff1681565b604051901515815260200161013e565b34801561017d57600080fd5b5061019161018c36600461148f565b6102b3565b005b610191610515565b3480156101a757600080fd5b506101916101b636600461148f565b6105e6565b3480156101c757600080fd5b5061019161093f565b3480156101dc57600080fd5b506101916101eb3660046114cf565b610a7f565b3480156101fc57600080fd5b50610205610b5a565b60405161013e97969594939291906115d8565b34801561022457600080fd5b5061016161023336600461167c565b600a6020526000908152604090205460ff1681565b34801561025457600080fd5b50610191610263366004611697565b610d17565b34801561027457600080fd5b506101916102833660046116c3565b610ed3565b34801561029457600080fd5b50610134600d5481565b3480156102aa57600080fd5b50610191611100565b60075460ff16156102df5760405162461bcd60e51b81526004016102d6906116ff565b60405180910390fd5b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa15801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190611736565b9050600082116103a25760405162461bcd60e51b815260206004820152601e60248201527f456e74657220616e20616d6f756e742067726561746572207468656e2030000060448201526064016102d6565b8181101561040e5760405162461bcd60e51b815260206004820152603360248201527f436f6e7472616374206e6f7420617070726f76656420746f206d6f7665207468604482015272697320616d6f756e74206f6620746f6b656e7360681b60648201526084016102d6565b6001600160a01b0383166000908152600b602052604081205460ff1615159003610498576001600160a01b0383166000818152600b60205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191690911790555b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f919061174f565b50505050565b60075460ff16156105385760405162461bcd60e51b81526004016102d6906116ff565b600034116105985760405162461bcd60e51b815260206004820152602760248201527f4465706f73697420616d6f756e742073686f756c6420626520677265617465726044820152660207468616e20360cc1b60648201526084016102d6565b34600c60008282546105aa9190611460565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2565b60075460ff16156106095760405162461bcd60e51b81526004016102d6906116ff565b6106116111c6565b600d544210156106635760405162461bcd60e51b815260206004820152601b60248201527f4e6f74207965742074696d6520746f20636f6c6c65637420666565000000000060448201526064016102d6565b6002546001600160a01b031633146106bd5760405162461bcd60e51b815260206004820152601e60248201527f596f75206d7573742062652074686520636f6e74726f6c2077616c6c6574000060448201526064016102d6565b60006106cf82655af3107a400061121f565b905047156107775760006106f5670de0b6b3a76400006106ef478561121f565b90611234565b6040519091506001600160a01b0385169082156108fc029083906000818181858888f1935050505015801561072e573d6000803e3d6000fd5b5080600c60008282546107419190611778565b90915550506040518181526001600160a01b038516906000906000805160206119008339815191529060200160405180910390a3505b60005b600554811015610915576000600582815481106107995761079961178b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190611736565b90508015610900576000610830670de0b6b3a76400006106ef848861121f565b60405163a9059cbb60e01b81526001600160a01b038981166004830152602482018390529192509084169063a9059cbb906044016020604051808303816000875af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a7919061174f565b6108c35760405162461bcd60e51b81526004016102d6906117a1565b866001600160a01b0316836001600160a01b0316600080516020611900833981519152836040516108f691815260200190565b60405180910390a3505b5050808061090d906117d0565b91505061077a565b506301e13380600d600082825461092c9190611460565b90915550506001600055505050565b5050565b60075460ff16156109625760405162461bcd60e51b81526004016102d6906116ff565b61096a6111c6565b336000908152600a602052604090205460ff1615156001146109da5760405162461bcd60e51b8152602060048201526024808201527f596f7520646f206e6f742068617665207065726d697373696f6e20746f207265604482015263766f6b6560e01b60648201526084016102d6565b610a3d6005805480602002602001604051908101604052809291908181526020018280548015610a3357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a15575b5050505050611240565b6007805460ff191660011790556040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a1610a7d6001600055565b565b3360009081526008602052604090205460ff161515600114610ab35760405162461bcd60e51b81526004016102d6906117e9565b610abb6111c6565b60075460ff16610b445760405162461bcd60e51b815260206004820152604860248201527f546865207061796f7574206d757374206265207265766f6b65642c206265666f60448201527f7265207468652072656d61696e696e672062616c616e63652063616e206265206064820152671c185a59081bdd5d60c21b608482015260a4016102d6565b610b4d81611240565b610b576001600055565b50565b606060006060806000806000600760009054906101000a900460ff1615610b935760405162461bcd60e51b81526004016102d6906116ff565b600154600e54600d546007546006805490946001600160a01b0316936003936004939192909160ff16908790610bc89061182f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf49061182f565b8015610c415780601f10610c1657610100808354040283529160200191610c41565b820191906000526020600020905b815481529060010190602001808311610c2457829003601f168201915b5050505050965084805480602002602001604051908101604052809291908181526020018280548015610c9d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c7f575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015610cf957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cdb575b50505050509350965096509650965096509650965090919293949596565b3360009081526008602052604090205460ff161515600114610d4b5760405162461bcd60e51b81526004016102d6906117e9565b60075460ff1615610d6e5760405162461bcd60e51b81526004016102d6906116ff565b610d766111c6565b6001600160a01b03811660009081526009602052604090205460ff161515600114610db35760405162461bcd60e51b81526004016102d690611869565b60008211610dfa5760405162461bcd60e51b81526020600482015260146024820152730456e7465722045746820616d6f756e74203e20360641b60448201526064016102d6565b81471015610e4a5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820457468657220746f207061796f757400000000000060448201526064016102d6565b60405181906001600160a01b0382169084156108fc029085906000818181858888f19350505050158015610e82573d6000803e3d6000fd5b5082600c6000828254610e959190611778565b90915550506040518381526001600160a01b0383169030906000805160206119008339815191529060200160405180910390a35061093b6001600055565b3360009081526008602052604090205460ff161515600114610f075760405162461bcd60e51b81526004016102d6906117e9565b60075460ff1615610f2a5760405162461bcd60e51b81526004016102d6906116ff565b610f326111c6565b6001600160a01b03811660009081526009602052604090205460ff161515600114610f6f5760405162461bcd60e51b81526004016102d690611869565b6040516370a0823160e01b815230600482015282906001600160a01b038516906370a0823190602401602060405180830381865afa158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd99190611736565b10156110275760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f7567682062616c616e6365206f662074686520746f6b656e0060448201526064016102d6565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a919061174f565b6110b65760405162461bcd60e51b81526004016102d6906117a1565b806001600160a01b0316836001600160a01b0316600080516020611900833981519152846040516110e991815260200190565b60405180910390a36110fb6001600055565b505050565b60075460ff16156111235760405162461bcd60e51b81526004016102d6906116ff565b336000908152600a602052604090205460ff1615156001146111875760405162461bcd60e51b815260206004820152601860248201527f41646472657373206973206e6f74207265766f6b61626c65000000000000000060448201526064016102d6565b336000818152600a6020526040808220805460ff19169055517f1e7dee237a3cc3247433f2b9432eee0f61b4039316e4d644828f5cb77edd7dbd9190a2565b6002600054036112185760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102d6565b6002600055565b600061122b82846118c6565b90505b92915050565b600061122b82846118dd565b47156112cd576001546040516001600160a01b039091169081904780156108fc02916000818181858888f19350505050158015611281573d6000803e3d6000fd5b5047600c60008282546112949190611778565b90915550506001546040514781526001600160a01b039091169030906000805160206119008339815191529060200160405180910390a3505b60005b815181101561093b5760008282815181106112ed576112ed61178b565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113669190611736565b905080156114355760015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af11580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e5919061174f565b6114015760405162461bcd60e51b81526004016102d6906117a1565b6001546040518281526001600160a01b03918216918416906000805160206119008339815191529060200160405180910390a35b50508080611442906117d0565b9150506112d0565b634e487b7160e01b600052601160045260246000fd5b8082018082111561122e5761122e61144a565b80356001600160a01b038116811461148a57600080fd5b919050565b600080604083850312156114a257600080fd5b6114ab83611473565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156114e257600080fd5b823567ffffffffffffffff808211156114fa57600080fd5b818501915085601f83011261150e57600080fd5b813581811115611520576115206114b9565b8060051b604051601f19603f83011681018181108582111715611545576115456114b9565b60405291825284820192508381018501918883111561156357600080fd5b938501935b828510156115885761157985611473565b84529385019392850192611568565b98975050505050505050565b600081518084526020808501945080840160005b838110156115cd5781516001600160a01b0316875295820195908201906001016115a8565b509495945050505050565b60e08152600088518060e084015260005b81811015611607576020818c018101516101008684010152016115e9565b506101006000818386010152601f19601f83011684019150611634602085018b6001600160a01b03169052565b8084830301604085015261164a8183018a611594565b915050828103606084015261165f8188611594565b9150508460808301528360a083015261158860c083018415159052565b60006020828403121561168e57600080fd5b61122b82611473565b600080604083850312156116aa57600080fd5b823591506116ba60208401611473565b90509250929050565b6000806000606084860312156116d857600080fd5b6116e184611473565b9250602084013591506116f660408501611473565b90509250925092565b6020808252601d908201527f54686520636f6e747261637420686173206265656e207265766f6b6564000000604082015260600190565b60006020828403121561174857600080fd5b5051919050565b60006020828403121561176157600080fd5b8151801515811461177157600080fd5b9392505050565b8181038181111561122e5761122e61144a565b634e487b7160e01b600052603260045260246000fd5b602080825260159082015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6000600182016117e2576117e261144a565b5060010190565b60208082526026908201527f4f6e6c79206120747275737465652063616e20706572666f726d20746869732060408201526530b1ba34b7b760d11b606082015260800190565b600181811c9082168061184357607f821691505b60208210810361186357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252603a908201527f42656e65666963696172792070726f7669646564206973206e6f74206120626560408201527f6e6566696369617279206f66207468697320636f6e7472616374000000000000606082015260800190565b808202811582820484141761122e5761122e61144a565b6000826118fa57634e487b7160e01b600052601260045260246000fd5b50049056fe9def4e2802183d68ce90a6a226a2962b59298616c27165f12c4fbc5c84cdd778a2646970667358221220c1003d962edea5aa9c8669c515b59838b8152ff5b8df7f42dbc49ec3e111eacc64736f6c63430008110033a2646970667358221220068935326c78558263965b672b8585f84381eba79a1c5a92a6dcdc7f4b14161564736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200009f5760003560e01c806360629486116200006e57806360629486146200011c5780637fb046f61462000135578063949a546a1462000177578063d536c7351462000180578063ebe9c1b314620001a657600080fd5b8063216b465b14620000a45780632588c6cc14620000d857806329d7dab214620000f1578063391dbe5f1462000108575b600080fd5b620000bb620000b53660046200056f565b620001bd565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ef620000e93660046200059e565b620001f6565b005b620000bb62000102366004620005c5565b62000265565b600054620000bb906001600160a01b031681565b6200012660015481565b604051908152602001620000cf565b6200016662000146366004620005df565b600460209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001620000cf565b60025462000126565b62000197620001913660046200059e565b62000290565b604051620000cf91906200061d565b620000ef620001b7366004620006bb565b62000308565b60036020528160005260406000208181548110620001da57600080fd5b6000918252602090912001546001600160a01b03169150829050565b600054600154604051634b02b47960e01b81526001600160a01b039283166004820152602481019190915290821690634b02b47990604401600060405180830381600087803b1580156200024957600080fd5b505af11580156200025e573d6000803e3d6000fd5b5050505050565b600281815481106200027657600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015620002fc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620002dd575b50505050509050919050565b6000898989308a8a8a8a8a8a604051620003229062000536565b620003379a999897969594939291906200081d565b604051809103906000f08015801562000354573d6000803e3d6000fd5b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0383161790559050620003ae888262000414565b620003bb878783620004d8565b620003c8858583620004d8565b6040516001600160a01b0382811682528916907f06b0b86b2403d8d421b36a82fccdccfc8673d474779abc4753b43abeaa7732539060200160405180910390a250505050505050505050565b6001600160a01b0380831660009081526004602090815260408083209385168352929052205460ff16620004d4576001600160a01b0382811660008181526003602090815260408083208054600180820183559185528385200180546001600160a01b031916968816968717905584845260048352818420868552835292819020805460ff1916909317909255905192835290917f3d725e612e8f113d672543da0d8e2bef6bf329ed1d81efe5eb8cc78fa7b34483910160405180910390a25b5050565b60005b8281101562000530576200051b848483818110620004fd57620004fd620008b4565b90506020020160208101906200051491906200059e565b8362000414565b806200052781620008ca565b915050620004db565b50505050565b61211380620008f383390190565b6001600160a01b03811681146200055a57600080fd5b50565b80356200056a8162000544565b919050565b600080604083850312156200058357600080fd5b8235620005908162000544565b946020939093013593505050565b600060208284031215620005b157600080fd5b8135620005be8162000544565b9392505050565b600060208284031215620005d857600080fd5b5035919050565b60008060408385031215620005f357600080fd5b8235620006008162000544565b91506020830135620006128162000544565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015620006605783516001600160a01b03168352928401929184019160010162000639565b50909695505050505050565b60008083601f8401126200067f57600080fd5b50813567ffffffffffffffff8111156200069857600080fd5b6020830191508360208260051b8501011115620006b457600080fd5b9250929050565b600080600080600080600080600060a08a8c031215620006da57600080fd5b893567ffffffffffffffff80821115620006f357600080fd5b818c0191508c601f8301126200070857600080fd5b8135818111156200071857600080fd5b8d60208285010111156200072b57600080fd5b602083019b50809a50506200074360208d016200055d565b985060408c01359150808211156200075a57600080fd5b620007688d838e016200066c565b909850965060608c01359150808211156200078257600080fd5b620007908d838e016200066c565b909650945060808c0135915080821115620007aa57600080fd5b50620007b98c828d016200066c565b915080935050809150509295985092959850929598565b8183526000602080850194508260005b8581101562000812578135620007f68162000544565b6001600160a01b031687529582019590820190600101620007e0565b509495945050505050565b60c081528960c0820152898b60e0830137600060e08b830181018290526001600160a01b038b811660208501528a166040840152601f8c01601f19168301838103820160608501529062000875908201898b620007d0565b905082810360808401526200088c818789620007d0565b905082810360a0840152620008a3818587620007d0565b9d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620008eb57634e487b7160e01b600052601160045260246000fd5b506001019056fe60806040526007805460ff191690556000600c553480156200002057600080fd5b506040516200211338038062002113833981016040819052620000439162000538565b60016000556006620000568782620006a4565b50600180546001600160a01b038088166001600160a01b03199283161790925560028054928716929091169190911790556200009283620000be565b6200009d8262000190565b620000a8816200025e565b505042600e819055600d5550620007ae92505050565b60005b81518110156200018c57600160086000848481518110620000e657620000e662000770565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060038282815181106200013c576200013c62000770565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620001838162000786565b915050620000c1565b5050565b60005b81518110156200018c57600160096000848481518110620001b857620001b862000770565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060048282815181106200020e576200020e62000770565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620002558162000786565b91505062000193565b60005b81518110156200018c576008600083838151811062000284576200028462000770565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16151560011480620002f0575060015482516001600160a01b0390911690839083908110620002dd57620002dd62000770565b60200260200101516001600160a01b0316145b620003525760405162461bcd60e51b815260206004820152602860248201527f41646472657373206d75737420626520612074727573746565206f72207468656044820152671039b2ba3a3637b960c11b606482015260840160405180910390fd5b6001600a60008484815181106200036d576200036d62000770565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620003ab8162000786565b91505062000261565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003f557620003f5620003b4565b604052919050565b600082601f8301126200040f57600080fd5b81516001600160401b038111156200042b576200042b620003b4565b602062000441601f8301601f19168201620003ca565b82815285828487010111156200045657600080fd5b60005b838110156200047657858101830151828201840152820162000459565b506000928101909101919091529392505050565b80516001600160a01b0381168114620004a257600080fd5b919050565b600082601f830112620004b957600080fd5b815160206001600160401b03821115620004d757620004d7620003b4565b8160051b620004e8828201620003ca565b92835284810182019282810190878511156200050357600080fd5b83870192505b848310156200052d576200051d836200048a565b8252918301919083019062000509565b979650505050505050565b60008060008060008060c087890312156200055257600080fd5b86516001600160401b03808211156200056a57600080fd5b620005788a838b01620003fd565b97506200058860208a016200048a565b96506200059860408a016200048a565b95506060890151915080821115620005af57600080fd5b620005bd8a838b01620004a7565b94506080890151915080821115620005d457600080fd5b620005e28a838b01620004a7565b935060a0890151915080821115620005f957600080fd5b506200060889828a01620004a7565b9150509295509295509295565b600181811c908216806200062a57607f821691505b6020821081036200064b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200069f57600081815260208120601f850160051c810160208610156200067a5750805b601f850160051c820191505b818110156200069b5782815560010162000686565b5050505b505050565b81516001600160401b03811115620006c057620006c0620003b4565b620006d881620006d1845462000615565b8462000651565b602080601f831160018114620007105760008415620006f75750858301515b600019600386901b1c1916600185901b1785556200069b565b600085815260208120601f198616915b82811015620007415788860151825594840194600190910190840162000720565b5085821015620007605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201620007a757634e487b7160e01b600052601160045260246000fd5b5060010190565b61195580620007be6000396000f3fe6080604052600436106100c65760003560e01c8063895706b81161007f578063c2d1faeb11610059578063c2d1faeb14610248578063cbc8ea8c14610268578063d3dc824214610288578063e39d3c181461029e57600080fd5b8063895706b8146101d05780638d17016e146101f05780639c5e28161461021857600080fd5b80631f741c7a1461011e5780632bc9ed0214610147578063338b5dea14610171578063439370b1146101935780634b02b4791461019b57806366625bbd146101bb57600080fd5b366101195734600c60008282546100dd9190611460565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2005b600080fd5b34801561012a57600080fd5b50610134600e5481565b6040519081526020015b60405180910390f35b34801561015357600080fd5b506007546101619060ff1681565b604051901515815260200161013e565b34801561017d57600080fd5b5061019161018c36600461148f565b6102b3565b005b610191610515565b3480156101a757600080fd5b506101916101b636600461148f565b6105e6565b3480156101c757600080fd5b5061019161093f565b3480156101dc57600080fd5b506101916101eb3660046114cf565b610a7f565b3480156101fc57600080fd5b50610205610b5a565b60405161013e97969594939291906115d8565b34801561022457600080fd5b5061016161023336600461167c565b600a6020526000908152604090205460ff1681565b34801561025457600080fd5b50610191610263366004611697565b610d17565b34801561027457600080fd5b506101916102833660046116c3565b610ed3565b34801561029457600080fd5b50610134600d5481565b3480156102aa57600080fd5b50610191611100565b60075460ff16156102df5760405162461bcd60e51b81526004016102d6906116ff565b60405180910390fd5b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa15801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190611736565b9050600082116103a25760405162461bcd60e51b815260206004820152601e60248201527f456e74657220616e20616d6f756e742067726561746572207468656e2030000060448201526064016102d6565b8181101561040e5760405162461bcd60e51b815260206004820152603360248201527f436f6e7472616374206e6f7420617070726f76656420746f206d6f7665207468604482015272697320616d6f756e74206f6620746f6b656e7360681b60648201526084016102d6565b6001600160a01b0383166000908152600b602052604081205460ff1615159003610498576001600160a01b0383166000818152600b60205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191690911790555b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f919061174f565b50505050565b60075460ff16156105385760405162461bcd60e51b81526004016102d6906116ff565b600034116105985760405162461bcd60e51b815260206004820152602760248201527f4465706f73697420616d6f756e742073686f756c6420626520677265617465726044820152660207468616e20360cc1b60648201526084016102d6565b34600c60008282546105aa9190611460565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2565b60075460ff16156106095760405162461bcd60e51b81526004016102d6906116ff565b6106116111c6565b600d544210156106635760405162461bcd60e51b815260206004820152601b60248201527f4e6f74207965742074696d6520746f20636f6c6c65637420666565000000000060448201526064016102d6565b6002546001600160a01b031633146106bd5760405162461bcd60e51b815260206004820152601e60248201527f596f75206d7573742062652074686520636f6e74726f6c2077616c6c6574000060448201526064016102d6565b60006106cf82655af3107a400061121f565b905047156107775760006106f5670de0b6b3a76400006106ef478561121f565b90611234565b6040519091506001600160a01b0385169082156108fc029083906000818181858888f1935050505015801561072e573d6000803e3d6000fd5b5080600c60008282546107419190611778565b90915550506040518181526001600160a01b038516906000906000805160206119008339815191529060200160405180910390a3505b60005b600554811015610915576000600582815481106107995761079961178b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190611736565b90508015610900576000610830670de0b6b3a76400006106ef848861121f565b60405163a9059cbb60e01b81526001600160a01b038981166004830152602482018390529192509084169063a9059cbb906044016020604051808303816000875af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a7919061174f565b6108c35760405162461bcd60e51b81526004016102d6906117a1565b866001600160a01b0316836001600160a01b0316600080516020611900833981519152836040516108f691815260200190565b60405180910390a3505b5050808061090d906117d0565b91505061077a565b506301e13380600d600082825461092c9190611460565b90915550506001600055505050565b5050565b60075460ff16156109625760405162461bcd60e51b81526004016102d6906116ff565b61096a6111c6565b336000908152600a602052604090205460ff1615156001146109da5760405162461bcd60e51b8152602060048201526024808201527f596f7520646f206e6f742068617665207065726d697373696f6e20746f207265604482015263766f6b6560e01b60648201526084016102d6565b610a3d6005805480602002602001604051908101604052809291908181526020018280548015610a3357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a15575b5050505050611240565b6007805460ff191660011790556040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a1610a7d6001600055565b565b3360009081526008602052604090205460ff161515600114610ab35760405162461bcd60e51b81526004016102d6906117e9565b610abb6111c6565b60075460ff16610b445760405162461bcd60e51b815260206004820152604860248201527f546865207061796f7574206d757374206265207265766f6b65642c206265666f60448201527f7265207468652072656d61696e696e672062616c616e63652063616e206265206064820152671c185a59081bdd5d60c21b608482015260a4016102d6565b610b4d81611240565b610b576001600055565b50565b606060006060806000806000600760009054906101000a900460ff1615610b935760405162461bcd60e51b81526004016102d6906116ff565b600154600e54600d546007546006805490946001600160a01b0316936003936004939192909160ff16908790610bc89061182f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf49061182f565b8015610c415780601f10610c1657610100808354040283529160200191610c41565b820191906000526020600020905b815481529060010190602001808311610c2457829003601f168201915b5050505050965084805480602002602001604051908101604052809291908181526020018280548015610c9d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c7f575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015610cf957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cdb575b50505050509350965096509650965096509650965090919293949596565b3360009081526008602052604090205460ff161515600114610d4b5760405162461bcd60e51b81526004016102d6906117e9565b60075460ff1615610d6e5760405162461bcd60e51b81526004016102d6906116ff565b610d766111c6565b6001600160a01b03811660009081526009602052604090205460ff161515600114610db35760405162461bcd60e51b81526004016102d690611869565b60008211610dfa5760405162461bcd60e51b81526020600482015260146024820152730456e7465722045746820616d6f756e74203e20360641b60448201526064016102d6565b81471015610e4a5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820457468657220746f207061796f757400000000000060448201526064016102d6565b60405181906001600160a01b0382169084156108fc029085906000818181858888f19350505050158015610e82573d6000803e3d6000fd5b5082600c6000828254610e959190611778565b90915550506040518381526001600160a01b0383169030906000805160206119008339815191529060200160405180910390a35061093b6001600055565b3360009081526008602052604090205460ff161515600114610f075760405162461bcd60e51b81526004016102d6906117e9565b60075460ff1615610f2a5760405162461bcd60e51b81526004016102d6906116ff565b610f326111c6565b6001600160a01b03811660009081526009602052604090205460ff161515600114610f6f5760405162461bcd60e51b81526004016102d690611869565b6040516370a0823160e01b815230600482015282906001600160a01b038516906370a0823190602401602060405180830381865afa158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd99190611736565b10156110275760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f7567682062616c616e6365206f662074686520746f6b656e0060448201526064016102d6565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a919061174f565b6110b65760405162461bcd60e51b81526004016102d6906117a1565b806001600160a01b0316836001600160a01b0316600080516020611900833981519152846040516110e991815260200190565b60405180910390a36110fb6001600055565b505050565b60075460ff16156111235760405162461bcd60e51b81526004016102d6906116ff565b336000908152600a602052604090205460ff1615156001146111875760405162461bcd60e51b815260206004820152601860248201527f41646472657373206973206e6f74207265766f6b61626c65000000000000000060448201526064016102d6565b336000818152600a6020526040808220805460ff19169055517f1e7dee237a3cc3247433f2b9432eee0f61b4039316e4d644828f5cb77edd7dbd9190a2565b6002600054036112185760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102d6565b6002600055565b600061122b82846118c6565b90505b92915050565b600061122b82846118dd565b47156112cd576001546040516001600160a01b039091169081904780156108fc02916000818181858888f19350505050158015611281573d6000803e3d6000fd5b5047600c60008282546112949190611778565b90915550506001546040514781526001600160a01b039091169030906000805160206119008339815191529060200160405180910390a3505b60005b815181101561093b5760008282815181106112ed576112ed61178b565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113669190611736565b905080156114355760015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af11580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e5919061174f565b6114015760405162461bcd60e51b81526004016102d6906117a1565b6001546040518281526001600160a01b03918216918416906000805160206119008339815191529060200160405180910390a35b50508080611442906117d0565b9150506112d0565b634e487b7160e01b600052601160045260246000fd5b8082018082111561122e5761122e61144a565b80356001600160a01b038116811461148a57600080fd5b919050565b600080604083850312156114a257600080fd5b6114ab83611473565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156114e257600080fd5b823567ffffffffffffffff808211156114fa57600080fd5b818501915085601f83011261150e57600080fd5b813581811115611520576115206114b9565b8060051b604051601f19603f83011681018181108582111715611545576115456114b9565b60405291825284820192508381018501918883111561156357600080fd5b938501935b828510156115885761157985611473565b84529385019392850192611568565b98975050505050505050565b600081518084526020808501945080840160005b838110156115cd5781516001600160a01b0316875295820195908201906001016115a8565b509495945050505050565b60e08152600088518060e084015260005b81811015611607576020818c018101516101008684010152016115e9565b506101006000818386010152601f19601f83011684019150611634602085018b6001600160a01b03169052565b8084830301604085015261164a8183018a611594565b915050828103606084015261165f8188611594565b9150508460808301528360a083015261158860c083018415159052565b60006020828403121561168e57600080fd5b61122b82611473565b600080604083850312156116aa57600080fd5b823591506116ba60208401611473565b90509250929050565b6000806000606084860312156116d857600080fd5b6116e184611473565b9250602084013591506116f660408501611473565b90509250925092565b6020808252601d908201527f54686520636f6e747261637420686173206265656e207265766f6b6564000000604082015260600190565b60006020828403121561174857600080fd5b5051919050565b60006020828403121561176157600080fd5b8151801515811461177157600080fd5b9392505050565b8181038181111561122e5761122e61144a565b634e487b7160e01b600052603260045260246000fd5b602080825260159082015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b6000600182016117e2576117e261144a565b5060010190565b60208082526026908201527f4f6e6c79206120747275737465652063616e20706572666f726d20746869732060408201526530b1ba34b7b760d11b606082015260800190565b600181811c9082168061184357607f821691505b60208210810361186357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252603a908201527f42656e65666963696172792070726f7669646564206973206e6f74206120626560408201527f6e6566696369617279206f66207468697320636f6e7472616374000000000000606082015260800190565b808202811582820484141761122e5761122e61144a565b6000826118fa57634e487b7160e01b600052601260045260246000fd5b50049056fe9def4e2802183d68ce90a6a226a2962b59298616c27165f12c4fbc5c84cdd778a2646970667358221220c1003d962edea5aa9c8669c515b59838b8152ff5b8df7f42dbc49ec3e111eacc64736f6c63430008110033a2646970667358221220068935326c78558263965b672b8585f84381eba79a1c5a92a6dcdc7f4b14161564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1206,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "bankWallet",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1209,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "bankFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1212,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "allDTrusts",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1217,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "dTrustsByUser",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1223,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "isUserAddedToDTrust",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}