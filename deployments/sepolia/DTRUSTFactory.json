{
  "address": "0x0D8F577436a6e8dC1911024cd982054BAa8eF892",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bankWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "settlor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "DTrustCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "UserAddedToDTrust",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDTrusts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "trustAddress",
          "type": "address"
        }
      ],
      "name": "collectAnnualFeeForTrust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_settlor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_trustees",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_canRevokeAddresses",
          "type": "address[]"
        }
      ],
      "name": "createDTRUST",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dTrustsByUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDTrustsByUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUserAddedToDTrust",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x962f8d2530048275d84bb14e67f09978c63c0591127d296d863fdd14943b79e0",
  "receipt": {
    "to": null,
    "from": "0x1E7cc3B053D7e358d36264aC02daBC9F69109DdE",
    "contractAddress": "0x0D8F577436a6e8dC1911024cd982054BAa8eF892",
    "transactionIndex": 21,
    "gasUsed": "2251629",
    "logsBloom": "0x
    "blockHash": "0xd2ae1363b8419c1c32411169deb900d5ec0f5d357c503324f4dec9c2dfcb0381",
    "transactionHash": "0x962f8d2530048275d84bb14e67f09978c63c0591127d296d863fdd14943b79e0",
    "logs": [],
    "blockNumber": 4432165,
    "cumulativeGasUsed": "7068803",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52dCAFA2B5de94801F66A3E665d55DbB287E0Ac3"
  ],
  "numDeployments": 1,
  "solcInputHash": "1177b29d278a843ae589d9b32b38fb7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bankWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"settlor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"DTrustCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"UserAddedToDTrust\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDTrusts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"trustAddress\",\"type\":\"address\"}],\"name\":\"collectAnnualFeeForTrust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_settlor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_trustees\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_canRevokeAddresses\",\"type\":\"address[]\"}],\"name\":\"createDTRUST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dTrustsByUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDTrustsByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserAddedToDTrust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTrustFactory.sol\":\"DTRUSTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/DTrustFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DTrustV1.sol\\\";\\n\\ncontract DTRUSTFactory {\\n    address public bankWallet;\\n    uint256 public bankFee;\\n    address[] public allDTrusts;\\n    mapping(address => address[]) public dTrustsByUser;\\n    mapping(address => mapping(address => bool)) public isUserAddedToDTrust;\\n\\n    event DTrustCreated(address indexed settlor, address trustAddress);\\n    event UserAddedToDTrust(address indexed user, address trustAddress);\\n\\n    constructor(\\n        address _bankWallet\\n    ) {\\n        bankWallet = _bankWallet;\\n    }\\n\\n    function createDTRUST(\\n        string calldata _name,\\n        address _settlor,\\n        address[] calldata _trustees,\\n        address[] calldata _beneficiaries,\\n        address[] calldata _canRevokeAddresses\\n    ) external {\\n        DTRUST newDTRUST = new DTRUST(\\n            _name,\\n            _settlor,\\n            address(this),\\n            _trustees,\\n            _beneficiaries,\\n            _canRevokeAddresses\\n        );\\n        allDTrusts.push(address(newDTRUST));\\n        addUniqueUser(_settlor, newDTRUST);\\n        addUniqueUsers(_trustees, newDTRUST);\\n        addUniqueUsers(_beneficiaries, newDTRUST);\\n        emit DTrustCreated(_settlor, address(newDTRUST));\\n    }\\n\\n    function addUniqueUsers(address[] calldata _users, DTRUST newDTRUST) internal {\\n        for (uint i = 0; i < _users.length; i++) {\\n            addUniqueUser(_users[i], newDTRUST);\\n        }\\n    }\\n\\n    function addUniqueUser(address _user, DTRUST newDTRUST) internal {\\n        if (!isUserAddedToDTrust[_user][address(newDTRUST)]) {\\n            dTrustsByUser[_user].push(address(newDTRUST));\\n            isUserAddedToDTrust[_user][address(newDTRUST)] = true;\\n            emit UserAddedToDTrust(_user, address(newDTRUST));\\n        }\\n    }\\n\\n    function getDTrustsByUser(address _user) external view returns (address[] memory) {\\n        return dTrustsByUser[_user];\\n    }\\n\\n    function collectAnnualFeeForTrust(address payable trustAddress) external {\\n        DTRUST(trustAddress).takeAnnualFee(bankWallet);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x63bbe077bf1872aeb7e7833b332047026a275c14d30c90c12c418d75fa7d147e\",\"license\":\"MIT\"},\"contracts/DTrustV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Import the ERC-20 interface\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\\ncontract DTRUST {\\n    using SafeMath for uint256;\\n    address settlor;\\n    address factoryAddress;\\n    address[] trustees;\\n    address[] beneficiaries;\\n    address[] tokens;\\n    string name;\\n    bool public isRevoked = false;\\n    \\n    mapping(address => bool) trusteesLookup;\\n    mapping(address => bool) beneficiariesLookup;\\n    mapping(address => bool) revokeAddressLookup;\\n    mapping(address => bool) tokenLookup;\\n\\n    uint256 etherBalance = 0;\\n    uint256 fee = 10;\\n    uint256 public startFeeTime;\\n    uint256 public dateCreated;\\n\\n    // Event to log the payouts\\n    event Paid(address indexed token, address indexed beneficiary, uint256 amount);\\n    event Revoked();\\n    event ReceivedEther(address indexed sender, uint256 amount);\\n    event DepositedEther(address indexed sender, uint256 amount);\\n\\n    modifier isTrustee() {\\n        require(trusteesLookup[msg.sender] == true, \\\"Only a trustee can perform this action\\\");\\n        _;\\n    }\\n\\n    modifier isActive {\\n        require(!isRevoked, \\\"The contract has been revoked\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        address _settlor,\\n        address _factoryAddress,\\n        address[] memory _trustees,\\n        address[] memory _beneficiaries,\\n        address[] memory _canRevokeAddresses\\n    ) {\\n        name = _name;\\n        settlor = _settlor;\\n        factoryAddress = _factoryAddress;\\n        addTrsutees(_trustees);\\n        addBeneficiaries(_beneficiaries);\\n        addRevokableAddresses(_canRevokeAddresses);\\n        dateCreated = block.timestamp;\\n        startFeeTime = block.timestamp;\\n    }\\n\\n    receive() external payable {\\n        etherBalance += msg.value;\\n        emit DepositedEther(msg.sender, msg.value);\\n    }\\n\\n    function addBeneficiaries(address[] memory _beneficiaries) internal {\\n        for (uint i = 0; i < _beneficiaries.length; i++) {\\n            beneficiariesLookup[_beneficiaries[i]] = true;\\n            beneficiaries.push(_beneficiaries[i]);\\n        }\\n    }\\n\\n    function addRevokableAddresses(address[] memory _canRevokeAddresses) internal {\\n        for(uint i = 0; i < _canRevokeAddresses.length; i++) {\\n            require(trusteesLookup[_canRevokeAddresses[i]] == true || _canRevokeAddresses[i] == settlor, \\\"Address must be a trustee or the settlor\\\");\\n            revokeAddressLookup[_canRevokeAddresses[i]] = true;\\n        }\\n    }\\n\\n    function addTrsutees(address[] memory _trustees) internal {\\n        for (uint i = 0; i < _trustees.length; i++) {\\n            trusteesLookup[_trustees[i]] = true;\\n            trustees.push(_trustees[i]);\\n        }\\n    }\\n\\n    function depositEth() external payable isActive { \\n        require(msg.value > 0, \\\"Deposit amount should be greater than 0\\\");\\n        etherBalance += msg.value;\\n        emit DepositedEther(msg.sender, msg.value);\\n    }\\n\\n    function depositToken(address token, uint256 amount) external isActive { \\n        // Check that the contract is approved to move the amount of tokens\\n        uint256 allowedAmount = IERC20(token).allowance(msg.sender, address(this));\\n        require(amount > 0, \\\"Enter an amount greater then 0\\\");\\n        require(allowedAmount >= amount, \\\"Contract not approved to move this amount of tokens\\\");\\n        \\n        if (tokenLookup[token] == false) {\\n            tokenLookup[token] = true;\\n            tokens.push(token);\\n        }\\n\\n        // Update the token balance in the mapping\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function payout(\\n        address _token,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external isTrustee isActive {   \\n        require(beneficiariesLookup[_beneficiary] == true, \\\"Beneficiary provided is not a beneficiary of this contract\\\");\\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, \\\"Not enough balance of the token\\\" );\\n        require(IERC20(_token).transfer(_beneficiary, _amount), \\\"Token transfer failed\\\");\\n        // Perform the payouts\\n        emit Paid(_token, _beneficiary, _amount);\\n    }\\n\\n    function revokeContract() external isActive {\\n        require(revokeAddressLookup[msg.sender] == true, \\\"You do not have permission to revoke\\\");\\n        payoutAll(tokens);\\n        isRevoked = true;\\n        emit Revoked();\\n    }\\n\\n    function payoutEth(uint256 _ethAmount,  address _beneficiary) public isTrustee isActive {\\n        require(beneficiariesLookup[_beneficiary] == true, \\\"Beneficiary provided is not a beneficiary of this contract\\\");\\n        require(_ethAmount > 0, \\\"Enter Eth amount > 0\\\");\\n        require(address(this).balance >= _ethAmount, \\\"Not enough Ether to payout\\\");\\n        address payable user = payable(_beneficiary);\\n        user.transfer(_ethAmount);\\n        etherBalance -= _ethAmount;\\n        emit Paid(address(this), _beneficiary, _ethAmount);\\n    }\\n\\n    function payoutRemaining(address[] memory _tokens) external isTrustee {\\n        payoutAll(_tokens);\\n    }\\n\\n    function payoutAll(address[] memory _tokens) internal {\\n        if(address(this).balance > 0){\\n            address payable user = payable(settlor);\\n            user.transfer(address(this).balance);\\n            etherBalance -= address(this).balance;\\n            emit Paid(address(this), settlor, address(this).balance);\\n        }\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            \\n            if(amount > 0){\\n                require(IERC20(token).transfer(settlor, amount), \\\"Token transfer failed\\\");\\n                emit Paid(token, settlor, amount);\\n            }\\n        }\\n    }\\n\\n    function takeAnnualFee(address _bankWallet) external isActive {\\n        require(block.timestamp >= startFeeTime, \\\"Not yet time to collect fee\\\");\\n        require(msg.sender == factoryAddress, \\\"You muse be the control wallet\\\");\\n        \\n        if(address(this).balance > 0 ){\\n            uint256 ethFee = address(this).balance.mul(fee).div(100);\\n            payable(_bankWallet).transfer(ethFee);\\n            etherBalance -= ethFee;\\n            emit Paid(address(0), _bankWallet, ethFee); // address(0) denotes Ether\\n        }\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            if(tokenBalance > 0 ){\\n                uint256 tokenFee = tokenBalance.mul(fee).div(100);\\n                require(IERC20(token).transfer(_bankWallet, tokenFee), \\\"Token transfer failed\\\");\\n                emit Paid(token, _bankWallet, tokenFee);\\n            }\\n        }\\n        \\n        // Update the startFeeTime for the next year\\n        startFeeTime += 365 days;\\n    }\\n\\n\\n    function getTrustInfo() isActive public view returns (\\n        string memory,\\n        address, \\n        address[] memory, \\n        address[] memory\\n    ) {\\n        return (name, settlor, trustees, beneficiaries);\\n    }\\n}\",\"keccak256\":\"0x28f98ff5132de7caa78c0deeb7c0ac6d028dcf43b8a7bffb1bf9e5a5506affda\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000935760003560e01c80636062948611620000625780636062948614620001105780637fb046f61462000129578063d536c735146200016b578063ebe9c1b3146200019157600080fd5b8063216b465b14620000985780632588c6cc14620000cc57806329d7dab214620000e5578063391dbe5f14620000fc575b600080fd5b620000af620000a93660046200054f565b620001a8565b6040516001600160a01b0390911681526020015b60405180910390f35b620000e3620000dd3660046200057e565b620001e1565b005b620000af620000f6366004620005a5565b62000245565b600054620000af906001600160a01b031681565b6200011a60015481565b604051908152602001620000c3565b6200015a6200013a366004620005bf565b600460209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001620000c3565b620001826200017c3660046200057e565b62000270565b604051620000c39190620005fd565b620000e3620001a23660046200069b565b620002e8565b60036020528160005260406000208181548110620001c557600080fd5b6000918252602090912001546001600160a01b03169150829050565b60005460405163061b84bb60e31b81526001600160a01b039182166004820152908216906330dc25d890602401600060405180830381600087803b1580156200022957600080fd5b505af11580156200023e573d6000803e3d6000fd5b5050505050565b600281815481106200025657600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015620002dc57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620002bd575b50505050509050919050565b6000898989308a8a8a8a8a8a604051620003029062000516565b620003179a99989796959493929190620007fd565b604051809103906000f08015801562000334573d6000803e3d6000fd5b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03831617905590506200038e8882620003f4565b6200039b878783620004b8565b620003a8858583620004b8565b6040516001600160a01b0382811682528916907f06b0b86b2403d8d421b36a82fccdccfc8673d474779abc4753b43abeaa7732539060200160405180910390a250505050505050505050565b6001600160a01b0380831660009081526004602090815260408083209385168352929052205460ff16620004b4576001600160a01b0382811660008181526003602090815260408083208054600180820183559185528385200180546001600160a01b031916968816968717905584845260048352818420868552835292819020805460ff1916909317909255905192835290917f3d725e612e8f113d672543da0d8e2bef6bf329ed1d81efe5eb8cc78fa7b34483910160405180910390a25b5050565b60005b828110156200051057620004fb848483818110620004dd57620004dd62000894565b9050602002016020810190620004f491906200057e565b83620003f4565b806200050781620008aa565b915050620004bb565b50505050565b611e5980620008d383390190565b6001600160a01b03811681146200053a57600080fd5b50565b80356200054a8162000524565b919050565b600080604083850312156200056357600080fd5b8235620005708162000524565b946020939093013593505050565b6000602082840312156200059157600080fd5b81356200059e8162000524565b9392505050565b600060208284031215620005b857600080fd5b5035919050565b60008060408385031215620005d357600080fd5b8235620005e08162000524565b91506020830135620005f28162000524565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015620006405783516001600160a01b03168352928401929184019160010162000619565b50909695505050505050565b60008083601f8401126200065f57600080fd5b50813567ffffffffffffffff8111156200067857600080fd5b6020830191508360208260051b85010111156200069457600080fd5b9250929050565b600080600080600080600080600060a08a8c031215620006ba57600080fd5b893567ffffffffffffffff80821115620006d357600080fd5b818c0191508c601f830112620006e857600080fd5b813581811115620006f857600080fd5b8d60208285010111156200070b57600080fd5b602083019b50809a50506200072360208d016200053d565b985060408c01359150808211156200073a57600080fd5b620007488d838e016200064c565b909850965060608c01359150808211156200076257600080fd5b620007708d838e016200064c565b909650945060808c01359150808211156200078a57600080fd5b50620007998c828d016200064c565b915080935050809150509295985092959850929598565b8183526000602080850194508260005b85811015620007f2578135620007d68162000524565b6001600160a01b031687529582019590820190600101620007c0565b509495945050505050565b60c081528960c0820152898b60e0830137600060e08b830181018290526001600160a01b038b811660208501528a166040840152601f8c01601f19168301838103820160608501529062000855908201898b620007b0565b905082810360808401526200086c818789620007b0565b905082810360a084015262000883818587620007b0565b9d9c50505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620008cb57634e487b7160e01b600052601160045260246000fd5b506001019056fe60806040526006805460ff191690556000600b55600a600c553480156200002557600080fd5b5060405162001e5938038062001e59833981016040819052620000489162000538565b6005620000568782620006a4565b50600080546001600160a01b038088166001600160a01b03199283161790925560018054928716929091169190911790556200009283620000be565b6200009d8262000190565b620000a8816200025e565b505042600e819055600d5550620007ae92505050565b60005b81518110156200018c57600160076000848481518110620000e657620000e662000770565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060028282815181106200013c576200013c62000770565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620001838162000786565b915050620000c1565b5050565b60005b81518110156200018c57600160086000848481518110620001b857620001b862000770565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060038282815181106200020e576200020e62000770565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620002558162000786565b91505062000193565b60005b81518110156200018c576007600083838151811062000284576200028462000770565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16151560011480620002f0575060005482516001600160a01b0390911690839083908110620002dd57620002dd62000770565b60200260200101516001600160a01b0316145b620003525760405162461bcd60e51b815260206004820152602860248201527f41646472657373206d75737420626520612074727573746565206f72207468656044820152671039b2ba3a3637b960c11b606482015260840160405180910390fd5b6001600960008484815181106200036d576200036d62000770565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620003ab8162000786565b91505062000261565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003f557620003f5620003b4565b604052919050565b600082601f8301126200040f57600080fd5b81516001600160401b038111156200042b576200042b620003b4565b602062000441601f8301601f19168201620003ca565b82815285828487010111156200045657600080fd5b60005b838110156200047657858101830151828201840152820162000459565b506000928101909101919091529392505050565b80516001600160a01b0381168114620004a257600080fd5b919050565b600082601f830112620004b957600080fd5b815160206001600160401b03821115620004d757620004d7620003b4565b8160051b620004e8828201620003ca565b92835284810182019282810190878511156200050357600080fd5b83870192505b848310156200052d576200051d836200048a565b8252918301919083019062000509565b979650505050505050565b60008060008060008060c087890312156200055257600080fd5b86516001600160401b03808211156200056a57600080fd5b620005788a838b01620003fd565b97506200058860208a016200048a565b96506200059860408a016200048a565b95506060890151915080821115620005af57600080fd5b620005bd8a838b01620004a7565b94506080890151915080821115620005d457600080fd5b620005e28a838b01620004a7565b935060a0890151915080821115620005f957600080fd5b506200060889828a01620004a7565b9150509295509295509295565b600181811c908216806200062a57607f821691505b6020821081036200064b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200069f57600081815260208120601f850160051c810160208610156200067a5750805b601f850160051c820191505b818110156200069b5782815560010162000686565b5050505b505050565b81516001600160401b03811115620006c057620006c0620003b4565b620006d881620006d1845462000615565b8462000651565b602080601f831160018114620007105760008415620006f75750858301515b600019600386901b1c1916600185901b1785556200069b565b600085815260208120601f198616915b82811015620007415788860151825594840194600190910190840162000720565b5085821015620007605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201620007a757634e487b7160e01b600052601160045260246000fd5b5060010190565b61169b80620007be6000396000f3fe6080604052600436106100a05760003560e01c806366625bbd1161006457806366625bbd14610195578063895706b8146101aa5780638d17016e146101ca578063c2d1faeb146101ef578063cbc8ea8c1461020f578063d3dc82421461022f57600080fd5b80631f741c7a146100f85780632bc9ed021461012157806330dc25d81461014b578063338b5dea1461016d578063439370b11461018d57600080fd5b366100f35734600b60008282546100b791906111bd565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2005b600080fd5b34801561010457600080fd5b5061010e600e5481565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b5060065461013b9060ff1681565b6040519015158152602001610118565b34801561015757600080fd5b5061016b6101663660046111ec565b610245565b005b34801561017957600080fd5b5061016b610188366004611207565b610588565b61016b6107e1565b3480156101a157600080fd5b5061016b6108b2565b3480156101b657600080fd5b5061016b6101c5366004611247565b6109e0565b3480156101d657600080fd5b506101df610a20565b6040516101189493929190611350565b3480156101fb57600080fd5b5061016b61020a3660046113dd565b610bb9565b34801561021b57600080fd5b5061016b61022a366004611409565b610d68565b34801561023b57600080fd5b5061010e600d5481565b60065460ff16156102715760405162461bcd60e51b815260040161026890611445565b60405180910390fd5b600d544210156102c35760405162461bcd60e51b815260206004820152601b60248201527f4e6f74207965742074696d6520746f20636f6c6c6563742066656500000000006044820152606401610268565b6001546001600160a01b0316331461031d5760405162461bcd60e51b815260206004820152601e60248201527f596f75206d7573652062652074686520636f6e74726f6c2077616c6c657400006044820152606401610268565b47156103c7576000610345606461033f600c5447610f7690919063ffffffff16565b90610f8b565b6040519091506001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561037e573d6000803e3d6000fd5b5080600b6000828254610391919061147c565b90915550506040518181526001600160a01b038316906000906000805160206116468339815191529060200160405180910390a3505b60005b600454811015610569576000600482815481106103e9576103e961148f565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906114a5565b90508015610554576000610484606461033f600c5485610f7690919063ffffffff16565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390529192509084169063a9059cbb906044016020604051808303816000875af11580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb91906114be565b6105175760405162461bcd60e51b8152600401610268906114e7565b846001600160a01b0316836001600160a01b03166000805160206116468339815191528360405161054a91815260200190565b60405180910390a3505b5050808061056190611516565b9150506103ca565b506301e13380600d600082825461058091906111bd565b909155505050565b60065460ff16156105ab5760405162461bcd60e51b815260040161026890611445565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa1580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c91906114a5565b90506000821161066e5760405162461bcd60e51b815260206004820152601e60248201527f456e74657220616e20616d6f756e742067726561746572207468656e203000006044820152606401610268565b818110156106da5760405162461bcd60e51b815260206004820152603360248201527f436f6e7472616374206e6f7420617070726f76656420746f206d6f7665207468604482015272697320616d6f756e74206f6620746f6b656e7360681b6064820152608401610268565b6001600160a01b0383166000908152600a602052604081205460ff1615159003610764576001600160a01b0383166000818152600a60205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191690911790555b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906114be565b50505050565b60065460ff16156108045760405162461bcd60e51b815260040161026890611445565b600034116108645760405162461bcd60e51b815260206004820152602760248201527f4465706f73697420616d6f756e742073686f756c6420626520677265617465726044820152660207468616e20360cc1b6064820152608401610268565b34600b600082825461087691906111bd565b909155505060405134815233907fe2b1a4afc779898c4d04b35def1a052ae6a93d8969a72fbf99411b270de728c49060200160405180910390a2565b60065460ff16156108d55760405162461bcd60e51b815260040161026890611445565b3360009081526009602052604090205460ff1615156001146109455760405162461bcd60e51b8152602060048201526024808201527f596f7520646f206e6f742068617665207065726d697373696f6e20746f207265604482015263766f6b6560e01b6064820152608401610268565b6109a8600480548060200260200160405190810160405280929190818152602001828054801561099e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610980575b5050505050610f97565b6006805460ff191660011790556040517f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee690600090a1565b3360009081526007602052604090205460ff161515600114610a145760405162461bcd60e51b81526004016102689061152f565b610a1d81610f97565b50565b6006546060906000908290819060ff1615610a4d5760405162461bcd60e51b815260040161026890611445565b600560008054906101000a90046001600160a01b031660026003838054610a7390611575565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9f90611575565b8015610aec5780601f10610ac157610100808354040283529160200191610aec565b820191906000526020600020905b815481529060010190602001808311610acf57829003601f168201915b5050505050935081805480602002602001604051908101604052809291908181526020018280548015610b4857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b2a575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610ba457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b86575b50505050509050935093509350935090919293565b3360009081526007602052604090205460ff161515600114610bed5760405162461bcd60e51b81526004016102689061152f565b60065460ff1615610c105760405162461bcd60e51b815260040161026890611445565b6001600160a01b03811660009081526008602052604090205460ff161515600114610c4d5760405162461bcd60e51b8152600401610268906115af565b60008211610c945760405162461bcd60e51b81526020600482015260146024820152730456e7465722045746820616d6f756e74203e20360641b6044820152606401610268565b81471015610ce45760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820457468657220746f207061796f75740000000000006044820152606401610268565b60405181906001600160a01b0382169084156108fc029085906000818181858888f19350505050158015610d1c573d6000803e3d6000fd5b5082600b6000828254610d2f919061147c565b90915550506040518381526001600160a01b038316903090600080516020611646833981519152906020015b60405180910390a3505050565b3360009081526007602052604090205460ff161515600114610d9c5760405162461bcd60e51b81526004016102689061152f565b60065460ff1615610dbf5760405162461bcd60e51b815260040161026890611445565b6001600160a01b03811660009081526008602052604090205460ff161515600114610dfc5760405162461bcd60e51b8152600401610268906115af565b6040516370a0823160e01b815230600482015282906001600160a01b038516906370a0823190602401602060405180830381865afa158015610e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6691906114a5565b1015610eb45760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f7567682062616c616e6365206f662074686520746f6b656e006044820152606401610268565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2791906114be565b610f435760405162461bcd60e51b8152600401610268906114e7565b806001600160a01b0316836001600160a01b031660008051602061164683398151915284604051610d5b91815260200190565b6000610f82828461160c565b90505b92915050565b6000610f828284611623565b471561102657600080546040516001600160a01b039091169182914780156108fc0292909190818181858888f19350505050158015610fda573d6000803e3d6000fd5b5047600b6000828254610fed919061147c565b90915550506000546040514781526001600160a01b039091169030906000805160206116468339815191529060200160405180910390a3505b60005b81518110156111a35760008282815181106110465761104661148f565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf91906114a5565b9050801561118e5760005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af115801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e91906114be565b61115a5760405162461bcd60e51b8152600401610268906114e7565b6000546040518281526001600160a01b03918216918416906000805160206116468339815191529060200160405180910390a35b5050808061119b90611516565b915050611029565b5050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f8557610f856111a7565b80356001600160a01b03811681146111e757600080fd5b919050565b6000602082840312156111fe57600080fd5b610f82826111d0565b6000806040838503121561121a57600080fd5b611223836111d0565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561125a57600080fd5b823567ffffffffffffffff8082111561127257600080fd5b818501915085601f83011261128657600080fd5b81358181111561129857611298611231565b8060051b604051601f19603f830116810181811085821117156112bd576112bd611231565b6040529182528482019250838101850191888311156112db57600080fd5b938501935b82851015611300576112f1856111d0565b845293850193928501926112e0565b98975050505050505050565b600081518084526020808501945080840160005b838110156113455781516001600160a01b031687529582019590820190600101611320565b509495945050505050565b608081526000855180608084015260005b8181101561137e57602081890181015160a0868401015201611361565b50600083820160a00152601f01601f191682016113a660208401876001600160a01b03169052565b60a08382030160408401526113be60a082018661130c565b905082810360608401526113d2818561130c565b979650505050505050565b600080604083850312156113f057600080fd5b82359150611400602084016111d0565b90509250929050565b60008060006060848603121561141e57600080fd5b611427846111d0565b92506020840135915061143c604085016111d0565b90509250925092565b6020808252601d908201527f54686520636f6e747261637420686173206265656e207265766f6b6564000000604082015260600190565b81810381811115610f8557610f856111a7565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156114b757600080fd5b5051919050565b6000602082840312156114d057600080fd5b815180151581146114e057600080fd5b9392505050565b602080825260159082015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b600060018201611528576115286111a7565b5060010190565b60208082526026908201527f4f6e6c79206120747275737465652063616e20706572666f726d20746869732060408201526530b1ba34b7b760d11b606082015260800190565b600181811c9082168061158957607f821691505b6020821081036115a957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252603a908201527f42656e65666963696172792070726f7669646564206973206e6f74206120626560408201527f6e6566696369617279206f66207468697320636f6e7472616374000000000000606082015260800190565b8082028115828204841417610f8557610f856111a7565b60008261164057634e487b7160e01b600052601260045260246000fd5b50049056fe9def4e2802183d68ce90a6a226a2962b59298616c27165f12c4fbc5c84cdd778a26469706673582212206026011ffc4fc8ea6cc7dd23e1d990f47515624d078b9fd7255eca8bb1c56f6f64736f6c63430008110033a2646970667358221220a30082b296a2aabe1280c255dc986a4ee14752a45a46bb0612f92878eef283ce64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 316,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "bankWallet",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 318,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "bankFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 321,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "allDTrusts",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 326,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "dTrustsByUser",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 332,
        "contract": "contracts/DTrustFactory.sol:DTRUSTFactory",
        "label": "isUserAddedToDTrust",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}